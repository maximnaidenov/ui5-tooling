{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UI5 Tooling \u00b6 An open and modular toolchain to develop state-of-the-art applications based on the UI5 framework. \ud83d\udd25 \u27a1\ufe0f Get Started \u00b6 Features \u00b6 \ud83d\udcbb UI5 CLI \u00b6 Also see the CLI Documentation npm install --global @ui5/cli \u2699\ufe0f Setup Project \u00b6 Configure your project for use with the UI5 Tooling. Also see the Configuration Documentation \u276f ui5 init Wrote ui5.yaml: specVersion: '2.2' metadata: name: my-app type: application \ud83d\ude9a Add Dependencies \u00b6 \u276f ui5 use SAPUI5@1.76.0 Updated configuration written to ui5.yaml This project is now using SAPUI5 version 1.76.0 \u276f ui5 add sap.ui.core sap.m themelib_sap_fiori_3 Updated configuration written to ui5.yaml Added framework libraries sap.ui.core sap.m themelib_sap_fiori_3 as dependencies \ud83c\udfc4 Server \u00b6 Start a local development server. Also see the Server Documentation \u276f ui5 serve Server started URL: http://localhost:8080 \ud83d\udee0 Builder \u00b6 Build a production-ready package of your project. Also see the Builder Documentation \u276f ui5 build Building my-app... \ud83d\udd28 (1/8) Running task escapeNonAsciiCharacters... \ud83d\udd28 (2/8) Running task replaceCopyright... \ud83d\udd28 (3/8) Running task replaceVersion... \ud83d\udd28 (4/8) Running task generateFlexChangesBundle... \ud83d\udd28 (5/8) Running task generateComponentPreload... \ud83d\udd28 (6/8) Running task createDebugFiles... \ud83d\udd28 (7/8) Running task uglify... \ud83d\udd28 (8/8) Running task generateVersionInfo... Build succeeded in 363 ms \ud83e\uddea Node.js API \u00b6 All UI5 Tooling modules provide JavaScript APIs available for direct consumption. They are documented in the UI5 Tooling API Reference .","title":"Home"},{"location":"#ui5-tooling","text":"An open and modular toolchain to develop state-of-the-art applications based on the UI5 framework.","title":"UI5 Tooling"},{"location":"#get-started","text":"","title":"\ud83d\udd25 \u27a1\ufe0f Get Started"},{"location":"#features","text":"","title":"Features"},{"location":"#ui5-cli","text":"Also see the CLI Documentation npm install --global @ui5/cli","title":"\ud83d\udcbb UI5 CLI"},{"location":"#setup-project","text":"Configure your project for use with the UI5 Tooling. Also see the Configuration Documentation \u276f ui5 init Wrote ui5.yaml: specVersion: '2.2' metadata: name: my-app type: application","title":"\u2699\ufe0f Setup Project"},{"location":"#add-dependencies","text":"\u276f ui5 use SAPUI5@1.76.0 Updated configuration written to ui5.yaml This project is now using SAPUI5 version 1.76.0 \u276f ui5 add sap.ui.core sap.m themelib_sap_fiori_3 Updated configuration written to ui5.yaml Added framework libraries sap.ui.core sap.m themelib_sap_fiori_3 as dependencies","title":"\ud83d\ude9a Add Dependencies"},{"location":"#server","text":"Start a local development server. Also see the Server Documentation \u276f ui5 serve Server started URL: http://localhost:8080","title":"\ud83c\udfc4 Server"},{"location":"#builder","text":"Build a production-ready package of your project. Also see the Builder Documentation \u276f ui5 build Building my-app... \ud83d\udd28 (1/8) Running task escapeNonAsciiCharacters... \ud83d\udd28 (2/8) Running task replaceCopyright... \ud83d\udd28 (3/8) Running task replaceVersion... \ud83d\udd28 (4/8) Running task generateFlexChangesBundle... \ud83d\udd28 (5/8) Running task generateComponentPreload... \ud83d\udd28 (6/8) Running task createDebugFiles... \ud83d\udd28 (7/8) Running task uglify... \ud83d\udd28 (8/8) Running task generateVersionInfo... Build succeeded in 363 ms","title":"\ud83d\udee0 Builder"},{"location":"#nodejs-api","text":"All UI5 Tooling modules provide JavaScript APIs available for direct consumption. They are documented in the UI5 Tooling API Reference .","title":"\ud83e\uddea Node.js API"},{"location":"Guidelines/","text":"Development Conventions and Guidelines \u00b6 JavaScript Coding Guidelines \u00b6 We enforce code style rules using ESLint . Execute npm run lint to check your code for style issues. You may also find an ESLint integration for your favorite IDE here . Testing \u00b6 Unit testing is based on the ava test-framework. You can run all tests using npm test (this is what Travis CI does for pull requests). During development, you might want to use npm run unit or npm run unit-watch (re-runs tests automatically after file changes) to quickly execute all unit tests and see whether your change just broke one of them. \ud83d\ude09 Git Guidelines \u00b6 No Merge Commits \u00b6 Please use rebase instead of merge to update a branch to the latest master. This helps keeping a clean commit history in the project. Commit Message Style \u00b6 Commit Summary \u00b6 The commit summary is the first line of the commit message. It should be 50-70 characters long. It must be prefixed by [FIX] , [FEATURE] or [INTERNAL] accordingly, followed by the name of the component or module which was the main subject of the change. Use [FIX] for bugfixes. Use [FEATURE] for new features / enhancements. Use [BREAKING] for breaking / incompatible changes. Note: The commit body of a breaking change should also include a paragraph starting with BREAKING CHANGE: . This paragraph will be highlighted in the changelog. Use [DEPENDENCY] for dependency updates that should be mentioned in the changelog. Use [INTERNAL] for all other changes (e.g. refactorings, documentation, etc.). These changes will not be listed in the changelog. Exceptions are changes created by automated processes like releases or dependency updates It must not contain [ or ] anywhere but in the prefix. It shall be written in imperative present tense (as recommended by Git ) Examples: Instead of \"Adding tests for\" or \"I added tests for\" use \"Add tests for\" or \"Add feature xy\" . Commit Body \u00b6 After the commit summary there should be an empty line followed by the commit body. Describe the intention and reasoning of the change If a change fixes an issue reported on GitHub, add the following line to the commit message: Fixes: #<issueNumber> (e.g. Fixes: #42 ) Breaking changes should include a paragraph starting with BREAKING CHANGE: . This paragraph will be highlighted in the changelog. Example \u00b6 [FIX] npm translator: Correct handling of devDependencies - devDevependencies should only be included in certain cases - Was caused by a refactoring Fixes: #42 Fixes: #45","title":"Development Conventions and Guidelines"},{"location":"Guidelines/#development-conventions-and-guidelines","text":"","title":"Development Conventions and Guidelines"},{"location":"Guidelines/#javascript-coding-guidelines","text":"We enforce code style rules using ESLint . Execute npm run lint to check your code for style issues. You may also find an ESLint integration for your favorite IDE here .","title":"JavaScript Coding Guidelines"},{"location":"Guidelines/#testing","text":"Unit testing is based on the ava test-framework. You can run all tests using npm test (this is what Travis CI does for pull requests). During development, you might want to use npm run unit or npm run unit-watch (re-runs tests automatically after file changes) to quickly execute all unit tests and see whether your change just broke one of them. \ud83d\ude09","title":"Testing"},{"location":"Guidelines/#git-guidelines","text":"","title":"Git Guidelines"},{"location":"Guidelines/#no-merge-commits","text":"Please use rebase instead of merge to update a branch to the latest master. This helps keeping a clean commit history in the project.","title":"No Merge Commits"},{"location":"Guidelines/#commit-message-style","text":"","title":"Commit Message Style"},{"location":"Guidelines/#commit-summary","text":"The commit summary is the first line of the commit message. It should be 50-70 characters long. It must be prefixed by [FIX] , [FEATURE] or [INTERNAL] accordingly, followed by the name of the component or module which was the main subject of the change. Use [FIX] for bugfixes. Use [FEATURE] for new features / enhancements. Use [BREAKING] for breaking / incompatible changes. Note: The commit body of a breaking change should also include a paragraph starting with BREAKING CHANGE: . This paragraph will be highlighted in the changelog. Use [DEPENDENCY] for dependency updates that should be mentioned in the changelog. Use [INTERNAL] for all other changes (e.g. refactorings, documentation, etc.). These changes will not be listed in the changelog. Exceptions are changes created by automated processes like releases or dependency updates It must not contain [ or ] anywhere but in the prefix. It shall be written in imperative present tense (as recommended by Git ) Examples: Instead of \"Adding tests for\" or \"I added tests for\" use \"Add tests for\" or \"Add feature xy\" .","title":"Commit Summary"},{"location":"Guidelines/#commit-body","text":"After the commit summary there should be an empty line followed by the commit body. Describe the intention and reasoning of the change If a change fixes an issue reported on GitHub, add the following line to the commit message: Fixes: #<issueNumber> (e.g. Fixes: #42 ) Breaking changes should include a paragraph starting with BREAKING CHANGE: . This paragraph will be highlighted in the changelog.","title":"Commit Body"},{"location":"Guidelines/#example","text":"[FIX] npm translator: Correct handling of devDependencies - devDevependencies should only be included in certain cases - Was caused by a refactoring Fixes: #42 Fixes: #45","title":"Example"},{"location":"indexJsdoc/","text":"UI5 Tooling API Reference \u00b6 Support \u00b6 Please follow our Contribution Guidelines on how to report an issue. Or chat with us in the #tooling channel of the OpenUI5 Community Slack License \u00b6 This project is licensed under the Apache Software License, Version 2.0 except as noted otherwise in the LICENSE file.","title":"UI5 Tooling API Reference"},{"location":"indexJsdoc/#ui5-tooling-api-reference","text":"","title":"UI5 Tooling API Reference"},{"location":"indexJsdoc/#support","text":"Please follow our Contribution Guidelines on how to report an issue. Or chat with us in the #tooling channel of the OpenUI5 Community Slack","title":"Support"},{"location":"indexJsdoc/#license","text":"This project is licensed under the Apache Software License, Version 2.0 except as noted otherwise in the LICENSE file.","title":"License"},{"location":"pages/Builder/","text":"UI5 Builder \u00b6 Types \u00b6 Types define how a project can be configured and how it is built. A type orchestrates a set of tasks and defines the order in which they get applied during build phase. Furthermore, it takes care of formatting and validating the project-specific configuration. Also see UI5 Project: Configuration application \u00b6 Projects of type application are typically the main or root project. In a projects dependency tree, there should only be one project of type application . If multiple are found, those further away from the root are ignored. The source directory of an application (typically named webapp ) is mapped to the virtual root path / . An applications source directory may or may not contain a Component.js file. If it does, it must also contain a manifest.json file. If there is a Component.js file, an optimized Component-preload.js file will be generated during the build. library \u00b6 UI5 libraries are often referred to as reuse-, custom- or control libraries . They are a key component in sharing code across multiple projects in UI5. A project of type library must have a source directory (typically named src ). It may also feature a \"test\" directory. These directories are mapped to the virtual directories /resources for the sources and /test-resources for the test resources. These directories should contain a directory structure representing the namespace of the library (e.g. src/my/first/library ) to prevent name clashes between the resources of different libraries. theme-library \u00b6 Available since Specification Version 1.1 UI5 theme libraries provide theming resources for the controls of one or multiple libraries. A project of type theme-library must have a source directory (typically named src ). It may also feature a \"test\" directory. These directories are mapped to the virtual directories /resources for the sources and /test-resources for the test resources. The source directory must contain a directory structure representing the namespaces of the libraries it provides theme resources for. For example, a theme library named my_custom_theme , providing resources for a library named my.library should have these resources in a directory path my/library/themes/my_custom_theme/ . module \u00b6 The module type is meant for usage with non-UI5 resources like third party libraries. Their path mapping can be configured freely. During a build, their resources are copied without modifications. Tasks \u00b6 Tasks are specific build steps to be executed during build phase. They are responsible for collecting resources which can be modified by a processor. A task configures one or more processors and supplies them with the collected resources. After the respective processor processed the resources, the task is able to continue with its workflow. Available tasks are listed here . Processors \u00b6 Processors work with provided resources. They contain the actual build step logic to apply specific modifications to supplied resources, or to make use of the resources' content to create new resources out of that. Processors can be implemented generically. The string replacer is an example for that. Since string replacement is a common build step, it can be useful in different contexts, e.g. code, version, date, and copyright replacement. A concrete replacement operation could be achieved by passing a custom configuration to the processor. This way, multiple tasks can make use of the same processor to achieve their build step. Available processors are listed here . Legacy Bundle Tooling (lbt) \u00b6 JavaScript port of the \"legacy\" Maven/Java based bundle tooling.","title":"Builder"},{"location":"pages/Builder/#ui5-builder","text":"","title":"UI5 Builder"},{"location":"pages/Builder/#types","text":"Types define how a project can be configured and how it is built. A type orchestrates a set of tasks and defines the order in which they get applied during build phase. Furthermore, it takes care of formatting and validating the project-specific configuration. Also see UI5 Project: Configuration","title":"Types"},{"location":"pages/Builder/#application","text":"Projects of type application are typically the main or root project. In a projects dependency tree, there should only be one project of type application . If multiple are found, those further away from the root are ignored. The source directory of an application (typically named webapp ) is mapped to the virtual root path / . An applications source directory may or may not contain a Component.js file. If it does, it must also contain a manifest.json file. If there is a Component.js file, an optimized Component-preload.js file will be generated during the build.","title":"application"},{"location":"pages/Builder/#library","text":"UI5 libraries are often referred to as reuse-, custom- or control libraries . They are a key component in sharing code across multiple projects in UI5. A project of type library must have a source directory (typically named src ). It may also feature a \"test\" directory. These directories are mapped to the virtual directories /resources for the sources and /test-resources for the test resources. These directories should contain a directory structure representing the namespace of the library (e.g. src/my/first/library ) to prevent name clashes between the resources of different libraries.","title":"library"},{"location":"pages/Builder/#theme-library","text":"Available since Specification Version 1.1 UI5 theme libraries provide theming resources for the controls of one or multiple libraries. A project of type theme-library must have a source directory (typically named src ). It may also feature a \"test\" directory. These directories are mapped to the virtual directories /resources for the sources and /test-resources for the test resources. The source directory must contain a directory structure representing the namespaces of the libraries it provides theme resources for. For example, a theme library named my_custom_theme , providing resources for a library named my.library should have these resources in a directory path my/library/themes/my_custom_theme/ .","title":"theme-library"},{"location":"pages/Builder/#module","text":"The module type is meant for usage with non-UI5 resources like third party libraries. Their path mapping can be configured freely. During a build, their resources are copied without modifications.","title":"module"},{"location":"pages/Builder/#tasks","text":"Tasks are specific build steps to be executed during build phase. They are responsible for collecting resources which can be modified by a processor. A task configures one or more processors and supplies them with the collected resources. After the respective processor processed the resources, the task is able to continue with its workflow. Available tasks are listed here .","title":"Tasks"},{"location":"pages/Builder/#processors","text":"Processors work with provided resources. They contain the actual build step logic to apply specific modifications to supplied resources, or to make use of the resources' content to create new resources out of that. Processors can be implemented generically. The string replacer is an example for that. Since string replacement is a common build step, it can be useful in different contexts, e.g. code, version, date, and copyright replacement. A concrete replacement operation could be achieved by passing a custom configuration to the processor. This way, multiple tasks can make use of the same processor to achieve their build step. Available processors are listed here .","title":"Processors"},{"location":"pages/Builder/#legacy-bundle-tooling-lbt","text":"JavaScript port of the \"legacy\" Maven/Java based bundle tooling.","title":"Legacy Bundle Tooling (lbt)"},{"location":"pages/CLI/","text":"UI5 CLI \u00b6 Requirements \u00b6 Node.js ( version 10 or higher \u26a0\ufe0f) Installation \u00b6 Install the CLI using the npm package manager: npm install --global @ui5/cli # Verify installation ui5 --help Usage/Syntax \u00b6 ui5 <command> [options] The CLI automatically checks for updates using update-notifier . While this is skipped in CI environments, you might also opt-out manually by following the steps described here . Common options \u00b6 These options you can use with each command. Option Description --help, -h Show help [boolean] --version, -v Show version number [boolean] --config Path to configuration file [string] --translator, --t8r Translator to use. Including optional colon separated translator parameters. [string] [default: \"npm\"] --verbose Enable verbose logging. [boolean] --loglevel, --log-level Set the logging level (error|warn|info|verbose|silly). [string] [default: \"info\"] Examples \u00b6 Execute command using a \"static\" translator with translator parameters ui5 <command> --translator static:/path/to/projectDependencies.yaml Execute command using a project configuration from custom path ui5 <command> --config /path/to/ui5.yaml Commands \u00b6 ui5 add \u00b6 Description Add SAPUI5/OpenUI5 framework libraries to the project configuration. Usage ui5 add [--development] [--optional] <framework-libraries..> Options Option Description --development, -D, --dev Add as development dependency [boolean] [default: false] --optional, -O Add as optional dependency [boolean] [default: false] Positionals Positional Description framework-libraries Framework library names [array] [required] [default: []] Examples Add the framework libraries sap.ui.core and sap.m as dependencies ui5 add sap.ui.core sap.m Add the framework library sap.ui.support as development dependency ui5 add -D sap.ui.support Add the framework library themelib_sap_fiori_3 as optional dependency ui5 add --optional themelib_sap_fiori_3 ui5 build \u00b6 Description Build project in current directory Usage ui5 build Child Commands Command Description ui5 build dev Dev build ui5 build jsdoc Build JSDoc resources ui5 build preload (default Build project and create preload bundles ui5 build self-contained Build project and create self-contained bundle Options Option Description --all, -a Include all project dependencies into build process [boolean] [default: false] --dest Path of build destination [string] [default: \"./dist\"] --clean-dest If present, clean the destination directory before building [boolean] [default: false] --dev-exclude-project A list of specific projects to be excluded from dev mode (dev mode must be active for this to be effective) [array] --include-task A list of specific tasks to be included to the default/dev set [array] --exclude-task A list of specific tasks to be excluded from default/dev set [array] --framework-version Overrides the framework version defined by the project [string] Examples Preload build for project and dependencies to \"./dist\" ui5 build --all Build project and dependencies but only apply the createDebugFiles- and generateAppPreload tasks ui5 build --all --exclude-task=* --include-task=createDebugFiles generateAppPreload Build project and dependencies by applying all default tasks including the createDebugFiles task and excluding the generateAppPreload task ui5 build --all --include-task=createDebugFiles --exclude-task=generateAppPreload Build project and dependencies in dev mode, except \"sap.ui.core\" and \"sap.m\" (useful in combination with --include-task) ui5 build dev --all --dev-exclude-project=sap.ui.core sap.m Build project and dependencies in dev mode. Only a set of essential tasks is executed. ui5 build dev ui5 init \u00b6 Description Initialize the UI5 Tooling configuration for an application or library project. Usage ui5 init ui5 remove \u00b6 Description Remove SAPUI5/OpenUI5 framework libraries from the project configuration. Usage ui5 remove <framework-libraries..> Positionals Positional Description framework-libraries Framework library names [array] [required] [default: []] Examples Remove the framework libraries sap.ui.core and sap.m as dependencies ui5 remove sap.ui.core sap.m ui5 serve \u00b6 Description Start a web server for the current project Usage ui5 serve Options Option Description --port, -p Port to bind on (default for HTTP: 8080, HTTP/2: 8443) [number] --open, -o Open web server root directory in default browser. Optionally, supplied relative path will be appended to the root URL [string] --h2 Shortcut for enabling the HTTP/2 protocol for the web server [boolean] [default: false] --simple-index Use a simplified view for the server directory listing [boolean] [default: false] --accept-remote-connections Accept remote connections. By default the server only accepts connections from localhost [boolean] [default: false] --key Path to the private key [string] [default: \"/home/runner/.ui5/server/server.key\"] --cert Path to the certificate [string] [default: \"/home/runner/.ui5/server/server.crt\"] --sap-csp-policies Always send content security policies 'sap-target-level-1' and 'sap-target-level-2' in report-only mode [boolean] [default: false] --serve-csp-reports Collects and serves CSP reports upon request to '/.ui5/csp/csp-reports.json' [boolean] [default: false] --framework-version Overrides the framework version defined by the project [string] Examples Start a web server for the current project ui5 serve Enable the HTTP/2 protocol for the web server (requires SSL certificate) ui5 serve --h2 Use the project configuration from a custom path ui5 serve --config /path/to/ui5.yaml Use a \"static\" translator with translator parameters. ui5 serve --translator static:/path/to/projectDependencies.yaml Listen to port 1337 and launch default browser with http://localhost:1337/test/QUnit.html ui5 serve --port 1337 --open tests/QUnit.html ui5 tree \u00b6 Description Outputs the dependency tree of the current project to stdout. It takes all relevant parameters of ui5 build into account. Usage ui5 tree Options Option Description --full Include more information (currently the project configuration) [boolean] [default: false] --json Output tree as formatted JSON string [boolean] [default: false] --dedupe Remove duplicate projects from project tree [boolean] [default: false] --framework-version Overrides the framework version defined by the project. Only supported in combination with --full [string] Examples Pipes the dependency tree into a new file \"tree.txt\" ui5 tree > tree.txt Pipes the dependency tree into a new file \"tree.json\" ui5 tree --json > tree.json ui5 use \u00b6 Description Initialize or update the project's framework configuration. Usage ui5 use <framework-info> Positionals Positional Description framework-info Framework name, version or both (name@version). Name can be \"SAPUI5\" or \"OpenUI5\" (case-insensitive). Version can be \"latest\", \"1.xx\" or \"1.xx.x\". [string] [required] Examples Use SAPUI5 in the latest available version ui5 use sapui5@latest Use OpenUI5 in the latest available 1.76 patch version ui5 use openui5@1.76 Use the latest available version of the configured framework ui5 use latest Use OpenUI5 without a version (or use existing version) ui5 use openui5 ui5 versions \u00b6 Description Shows the versions of all UI5 Tooling modules Usage ui5 versions Local vs. Global Installation \u00b6 In general, we recommend a global installation of the UI5 CLI ( npm install --global @ui5/cli ). However, it makes sense to add the UI5 CLI as a devDependency ( npm install --save-dev @ui5/cli ) for a project that is using ui5 commands in its build or test scripts or otherwise depends on the UI5 CLI for development workflows (like continuous integration). In case you have both, a local installation in one of your projects as well as a global installation, the UI5 CLI will always try to invoke the local installation. This is in part because npm scripts defined in your package.json will also always invoke the local installation. This behavior can be disabled by setting the environment variable UI5_CLI_NO_LOCAL . Example You have a project located at /my-application . The project has a devDependency to @ui5/cli and defines the start script \"ui5 serve\" . Current Working Directory Command Uses globally installed UI5 CLI Uses locally installed UI5 CLI / ui5 --version \u2714\ufe0f /my-application ui5 --version \u2714\ufe0f /my-application ui5 serve \u2714\ufe0f /my-application npm start \u2714\ufe0f /my-application UI5_CLI_NO_LOCAL=X ui5 serve \u2714\ufe0f /my-application UI5_CLI_NO_LOCAL=X npm start \u2714\ufe0f","title":"CLI"},{"location":"pages/CLI/#ui5-cli","text":"","title":"UI5 CLI"},{"location":"pages/CLI/#requirements","text":"Node.js ( version 10 or higher \u26a0\ufe0f)","title":"Requirements"},{"location":"pages/CLI/#installation","text":"Install the CLI using the npm package manager: npm install --global @ui5/cli # Verify installation ui5 --help","title":"Installation"},{"location":"pages/CLI/#usagesyntax","text":"ui5 <command> [options] The CLI automatically checks for updates using update-notifier . While this is skipped in CI environments, you might also opt-out manually by following the steps described here .","title":"Usage/Syntax"},{"location":"pages/CLI/#common-options","text":"These options you can use with each command. Option Description --help, -h Show help [boolean] --version, -v Show version number [boolean] --config Path to configuration file [string] --translator, --t8r Translator to use. Including optional colon separated translator parameters. [string] [default: \"npm\"] --verbose Enable verbose logging. [boolean] --loglevel, --log-level Set the logging level (error|warn|info|verbose|silly). [string] [default: \"info\"]","title":"Common options"},{"location":"pages/CLI/#examples","text":"Execute command using a \"static\" translator with translator parameters ui5 <command> --translator static:/path/to/projectDependencies.yaml Execute command using a project configuration from custom path ui5 <command> --config /path/to/ui5.yaml","title":"Examples"},{"location":"pages/CLI/#commands","text":"","title":"Commands"},{"location":"pages/CLI/#ui5-add","text":"Description Add SAPUI5/OpenUI5 framework libraries to the project configuration. Usage ui5 add [--development] [--optional] <framework-libraries..> Options Option Description --development, -D, --dev Add as development dependency [boolean] [default: false] --optional, -O Add as optional dependency [boolean] [default: false] Positionals Positional Description framework-libraries Framework library names [array] [required] [default: []] Examples Add the framework libraries sap.ui.core and sap.m as dependencies ui5 add sap.ui.core sap.m Add the framework library sap.ui.support as development dependency ui5 add -D sap.ui.support Add the framework library themelib_sap_fiori_3 as optional dependency ui5 add --optional themelib_sap_fiori_3","title":"ui5 add"},{"location":"pages/CLI/#ui5-build","text":"Description Build project in current directory Usage ui5 build Child Commands Command Description ui5 build dev Dev build ui5 build jsdoc Build JSDoc resources ui5 build preload (default Build project and create preload bundles ui5 build self-contained Build project and create self-contained bundle Options Option Description --all, -a Include all project dependencies into build process [boolean] [default: false] --dest Path of build destination [string] [default: \"./dist\"] --clean-dest If present, clean the destination directory before building [boolean] [default: false] --dev-exclude-project A list of specific projects to be excluded from dev mode (dev mode must be active for this to be effective) [array] --include-task A list of specific tasks to be included to the default/dev set [array] --exclude-task A list of specific tasks to be excluded from default/dev set [array] --framework-version Overrides the framework version defined by the project [string] Examples Preload build for project and dependencies to \"./dist\" ui5 build --all Build project and dependencies but only apply the createDebugFiles- and generateAppPreload tasks ui5 build --all --exclude-task=* --include-task=createDebugFiles generateAppPreload Build project and dependencies by applying all default tasks including the createDebugFiles task and excluding the generateAppPreload task ui5 build --all --include-task=createDebugFiles --exclude-task=generateAppPreload Build project and dependencies in dev mode, except \"sap.ui.core\" and \"sap.m\" (useful in combination with --include-task) ui5 build dev --all --dev-exclude-project=sap.ui.core sap.m Build project and dependencies in dev mode. Only a set of essential tasks is executed. ui5 build dev","title":"ui5 build"},{"location":"pages/CLI/#ui5-init","text":"Description Initialize the UI5 Tooling configuration for an application or library project. Usage ui5 init","title":"ui5 init"},{"location":"pages/CLI/#ui5-remove","text":"Description Remove SAPUI5/OpenUI5 framework libraries from the project configuration. Usage ui5 remove <framework-libraries..> Positionals Positional Description framework-libraries Framework library names [array] [required] [default: []] Examples Remove the framework libraries sap.ui.core and sap.m as dependencies ui5 remove sap.ui.core sap.m","title":"ui5 remove"},{"location":"pages/CLI/#ui5-serve","text":"Description Start a web server for the current project Usage ui5 serve Options Option Description --port, -p Port to bind on (default for HTTP: 8080, HTTP/2: 8443) [number] --open, -o Open web server root directory in default browser. Optionally, supplied relative path will be appended to the root URL [string] --h2 Shortcut for enabling the HTTP/2 protocol for the web server [boolean] [default: false] --simple-index Use a simplified view for the server directory listing [boolean] [default: false] --accept-remote-connections Accept remote connections. By default the server only accepts connections from localhost [boolean] [default: false] --key Path to the private key [string] [default: \"/home/runner/.ui5/server/server.key\"] --cert Path to the certificate [string] [default: \"/home/runner/.ui5/server/server.crt\"] --sap-csp-policies Always send content security policies 'sap-target-level-1' and 'sap-target-level-2' in report-only mode [boolean] [default: false] --serve-csp-reports Collects and serves CSP reports upon request to '/.ui5/csp/csp-reports.json' [boolean] [default: false] --framework-version Overrides the framework version defined by the project [string] Examples Start a web server for the current project ui5 serve Enable the HTTP/2 protocol for the web server (requires SSL certificate) ui5 serve --h2 Use the project configuration from a custom path ui5 serve --config /path/to/ui5.yaml Use a \"static\" translator with translator parameters. ui5 serve --translator static:/path/to/projectDependencies.yaml Listen to port 1337 and launch default browser with http://localhost:1337/test/QUnit.html ui5 serve --port 1337 --open tests/QUnit.html","title":"ui5 serve"},{"location":"pages/CLI/#ui5-tree","text":"Description Outputs the dependency tree of the current project to stdout. It takes all relevant parameters of ui5 build into account. Usage ui5 tree Options Option Description --full Include more information (currently the project configuration) [boolean] [default: false] --json Output tree as formatted JSON string [boolean] [default: false] --dedupe Remove duplicate projects from project tree [boolean] [default: false] --framework-version Overrides the framework version defined by the project. Only supported in combination with --full [string] Examples Pipes the dependency tree into a new file \"tree.txt\" ui5 tree > tree.txt Pipes the dependency tree into a new file \"tree.json\" ui5 tree --json > tree.json","title":"ui5 tree"},{"location":"pages/CLI/#ui5-use","text":"Description Initialize or update the project's framework configuration. Usage ui5 use <framework-info> Positionals Positional Description framework-info Framework name, version or both (name@version). Name can be \"SAPUI5\" or \"OpenUI5\" (case-insensitive). Version can be \"latest\", \"1.xx\" or \"1.xx.x\". [string] [required] Examples Use SAPUI5 in the latest available version ui5 use sapui5@latest Use OpenUI5 in the latest available 1.76 patch version ui5 use openui5@1.76 Use the latest available version of the configured framework ui5 use latest Use OpenUI5 without a version (or use existing version) ui5 use openui5","title":"ui5 use"},{"location":"pages/CLI/#ui5-versions","text":"Description Shows the versions of all UI5 Tooling modules Usage ui5 versions","title":"ui5 versions"},{"location":"pages/CLI/#local-vs-global-installation","text":"In general, we recommend a global installation of the UI5 CLI ( npm install --global @ui5/cli ). However, it makes sense to add the UI5 CLI as a devDependency ( npm install --save-dev @ui5/cli ) for a project that is using ui5 commands in its build or test scripts or otherwise depends on the UI5 CLI for development workflows (like continuous integration). In case you have both, a local installation in one of your projects as well as a global installation, the UI5 CLI will always try to invoke the local installation. This is in part because npm scripts defined in your package.json will also always invoke the local installation. This behavior can be disabled by setting the environment variable UI5_CLI_NO_LOCAL . Example You have a project located at /my-application . The project has a devDependency to @ui5/cli and defines the start script \"ui5 serve\" . Current Working Directory Command Uses globally installed UI5 CLI Uses locally installed UI5 CLI / ui5 --version \u2714\ufe0f /my-application ui5 --version \u2714\ufe0f /my-application ui5 serve \u2714\ufe0f /my-application npm start \u2714\ufe0f /my-application UI5_CLI_NO_LOCAL=X ui5 serve \u2714\ufe0f /my-application UI5_CLI_NO_LOCAL=X npm start \u2714\ufe0f","title":"Local vs. Global Installation"},{"location":"pages/Configuration/","text":"Configuration \u00b6 This document describes the configuration of UI5 Tooling based projects and extensions. It represents Specification Version 2.2 . A projects UI5 Tooling configuration is typically located in a YAML file named ui5.yaml , located in the root directory. Validation / IDE support \u00b6 Starting with specification version 2.0 the configuration is validated according to a JSON schema. The current version of the schema can be found here: https://sap.github.io/ui5-tooling/schema/ui5.yaml.json The schema is also part of the JSON Schema Store catalog which is used by the YAML Language Server . See the list of Clients to find extensions for various IDEs and editors. Example \u00b6 specVersion : \"2.2\" type : application|library|theme-library|module metadata : name : some.project.name General Configuration \u00b6 A project must define a specification version ( specVersion ), to which its configuration is compatible to. Also see Specification Versions . In addition, a project must define a type . This can be either application , library , theme-library (since Specification Version 1.1) or module . The type defines the default path mappings and build tasks. See UI5 Builder: Types for details. specVersion : \"2.2\" type : library Metadata \u00b6 A project must have a name and might define a copyright string. In the UI5 Tooling, a project is typically identified by the configured name . It must be unique and should ideally follow a namespace scheme like company.businessarea.project . A given copyright string will be used to fill placeholders like ${copyright} and @copyright@ in a projects source code. |- is a way to define a multi line string in YAML. For details, please check the YAML Specification . Inside the copyright string, you can use the placeholder ${currentYear} which will be replaced with the current year. In case your project is deprecated you may also define a property deprecated: true . In projects that have a direct dependency to your project, the UI5 Tooling will then display a deprecation warning. metadata : name : my.cool.project copyright : |- My Cool Project * (c) Copyright 2009-${currentYear} My Company * Licensed under the Apache License, Version 2.0 - see LICENSE.txt. Resources \u00b6 Path Mapping \u00b6 Depending on the project type, the UI5 Tooling expects your projects source files to be in certain directories: Type: application Default directory for runtime and test files: webapp Type: library and theme-library Default directory for runtime files: src Default directory for test files: test Type: module By default the projects root directory will be used. If your projects sources are located in different directories, you need to configure a path mapping. As types might require unique project structures, this configuration can differ: Note that all configured paths must be POSIX and relative to the projects root directory. Path Mapping of Applications \u00b6 Available mappings: webapp (runtime path / ) resources : configuration : paths : webapp : my/path Path Mapping of Libraries \u00b6 Available mappings: src (runtime path /resources ) test (runtime path /test-resources ) resources : configuration : paths : src : path/to/sources test : path/to/tests Path Mapping of Modules \u00b6 Any virtual paths can be mapped to any physical path. However, it is recommended that modules include their namespace in the virtual path and use the /resources prefix (e.g. /resources/my/library/module-xy/ ). resources : configuration : paths : /resources/my/library/module-xy/ : lib /resources/my/library/module-xy-min/ : dist Encoding of *.properties files \u00b6 Info This configuration is available since UI5 CLI v1.7.0 By default the UI5 Tooling expects different encodings for *.properties i18n files, depending on the project's specification version: Specification Version Default propertiesFileSourceEncoding 2.0+ UTF-8 0.1, 1.0 or 1.1 ISO-8859-1 If your project uses a different encoding for *.properties files, you need to set the propertiesFileSourceEncoding configuration property. The UI5 Tooling will read the corresponding files of the project in the given encoding. Any non-ASCII characters will be replaced with the respective Unicode escape sequences. This allows you to deploy the resulting files to any environment, independent of how it expects *.properties files to be encoded. Please refer to RFC 7 for details. resources : configuration : propertiesFileSourceEncoding : UTF-8|ISO-8859-1 Custom Configuration \u00b6 Info This configuration is available since UI5 CLI v2.2.0 and applies only to projects defining Specification Version 2.1 or higher. Custom configuration that is ignored by the UI5 Tooling. This can be used to store UI5 specific configuration for third-party tools. The \"customConfiguration\" value must be an object. For third-party tools it is recommended to follow a namespace-like structure. customConfiguration : myTool : key : value myOtherTool : otherKey : otherValue Framework Configuration \u00b6 Info This configuration is available since UI5 CLI v2.0.0 and applies only to projects defining Specification Version 2.0 or higher. Define your project's framework dependencies. In your project's framework configuration you must define whether you want to use the OpenUI5 or the SAPUI5 framework. For more information, see our documentation on the differences between OpenUI5 and SAPUI5 . SAPUI5 framework : name : SAPUI5 OpenUI5 framework : name : OpenUI5 If you are not sure which framework is right for you, see our documentation on the differences between OpenUI5 and SAPUI5 . Warning Projects that use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework. If you want to execute UI5 CLI commands directly in your project you also need to specify the framework version you want to use. Whenever you execute a UI5 CLI command, the framework version of the current root project is used. framework : name : SAPUI5 version : 1.76.0 You can find an overview of the available versions for each framework here: SAPUI5 Version Overview ( Note: The UI5 Tooling can only consume SAPUI5 starting with Version 1.76.0.) OpenUI5 Version Overview Dependencies \u00b6 All libraries required by your project must be listed in the libraries section of the framework configuration. framework : name : SAPUI5 version : 1.76.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp - ... Development Dependencies \u00b6 Development dependencies are only installed if the project defining them is the current root project. They are typically only required during the development of the project. libraries : - name : sap.ushell development : true Note that a development dependency cannot be optional and vice versa. Optional Dependencies \u00b6 Optional dependencies are installed either if the project defining them is the current root project or if the dependency is already part of the current dependency tree. A typical use case is libraries defining optional dependencies to all theme libraries they support. You can choose which theme library to use by the application that is consuming the library by declaring it as a non-optional dependency. libraries : - name : themelib_sap_fiori_3 optional : true Example my library specVersion : \"2.2\" type : library metadata : name : some.library framework : name : SAPUI5 libraries : - name : sap.ui.core - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true my application (depending on my library) specVersion : \"2.2\" type : application metadata : name : some.app framework : name : SAPUI5 libraries : - name : sap.ui.core - name : themelib_sap_fiori_3 When building the application project, only the theme library themelib_sap_fiori_3 will be installed and built. Build Configuration \u00b6 Build Resources \u00b6 You can exclude a projects resources from the build process using a list of glob patterns. Matching resources will be ignored by the builder and all build tasks. Patterns are applied to the virtual path of resources (i.e. the UI5 runtime paths). Exclude patterns are always applied after any includes. builder : resources : excludes : - \"/resources/some/project/name/test_results/**\" - \"/test-resources/**\" - \"!/test-resources/some/project/name/demo-app/**\" Cachebuster \u00b6 By default, the generated cachebuster info file signatures are based on timestamps ( time ). In setups like CI environments, a mechanism based on file hashes ( hash ) might be more reliable. See also PR #241 . builder : cachebuster : signatureType : hash Component Preload Generation \u00b6 For projects of type application a Component-preload.js bundle is generated by default. You can override this default behavior by defining a componentPreload configuration. For projects of type library there is no Component Preload created by default. However you can define a componentPreload configuration to create Component Preload bundles. Those will be created in addition to the library-preload.js bundle. There are two ways of including components, which can also be used in combination with each other: The paths option takes one or multiple patterns. For every matched file a separate Component-preload.js will be generated. Patterns are always applied relative to the project's virtual source directory /resources/ builder : componentPreload : paths : - \"my/great/app/**/Component.js\" The namespaces option takes one or multiple component namespaces, which correspond to the directory structures: builder : componentPreload : namespaces : - \"my/great/app/componentOne\" - \"my/great/app/componentTwo\" Custom Tasks \u00b6 You can define custom build tasks that will be executed for the project. Please refer to the Custom Tasks Documentation for a detailed explanation and examples of the build extensibility. Each customTasks entry must define the name of the custom task as defined in its metadata.name property. In addition, the execution order needs to be defined by referencing a standard task or an already configured custom task using the afterTask or beforeTask property. Optionally, arbitrary configuration can be passed to the custom task. builder : customTasks : - name : custom-task-1 beforeTask : replaceCopyright configuration : some-key : some value - name : custom-task-2 afterTask : custom-task-1 configuration : color : blue JSDoc \u00b6 You can exclude the resources of a project from the JSDoc build process using a list of glob patterns. Matching resources will be ignored by the JSDoc build task. Patterns are always applied relative to the project's virtual source directory /resources/ . These excludes are applied before any general builder excludes that have been defined in builder.resources.excludes . builder : jsdoc : excludes : - \"some/project/name/thirdparty/**\" Server Configuration \u00b6 By default, the UI5 Tooling will serve applications using port 8080 . When running in HTTP/2 or HTTPS mode, port 8443 will be used. If the default port is already in use, the next higher free port will be used. Instead of this behavior, a project can configure alternative default ports. If the configured port is already in use, an error will be thrown. The server port can still be overwritten with the CLI parameter --port . server : settings : httpPort : 1337 httpsPort : 1443 Extension Configuration \u00b6 Extensions configuration can be added to any projects ui5.yaml . For better readability, it should to be located after the projects configuration, separated by three dashes \" --- \". In cases where an extension shall be reused across multiple projects you can make it a module itself and have its configuration in a standalone ui5.yaml located inside that module. Extensions can be identified by the kind: extension configuration. Note that if no kind configuration is given, project is assumed. Available Extensions \u00b6 Custom Tasks Custom Server Middleware Project Shims Example \u00b6 specVersion : \"2.2\" type : application metadata : name : my.application --- specVersion : \"2.2\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : specVersion : \"2.2\" type : module metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\" Custom Bundling \u00b6 Custom bundles can be defined in the ui5.yaml . Within the builder/bundles configuration a list of bundleDefinitions can be described. builder : bundles : - bundleDefinition : name : \"sap-ui-custom.js\" defaultFileTypes : - \".js\" sections : - mode : raw filters : - ui5loader-autoconfig.js resolve : true sort : true bundleOptions : optimize : true - bundleDefinition : name : \"app.js\" defaultFileTypes : - \".js\" sections : - mode : preload filters : - some/app/Component.js resolve : true sort : true - mode : provided filters : - ui5loader-autoconfig.js resolve : true bundleOptions : optimize : true Properties \u00b6 bundles A list of bundle definitions. A bundleDefinition contains of the following options: name : The module bundle name defaultFileTypes : List of default file types which should be included in the bundle sections : A list of module bundle definition sections. Each section specifies an embedding technology (see API-Reference ) and lists the resources that should be in- or excluded from the section. mode : The embedding technology (e.g. provided, raw, preload) filters : List of resources as glob patterns that should be in- or excluded. A pattern either contains of a trailing slash / or single * and double ** asterisks which denote an arbitrary number of characters or folder names. Exludes should be marked with a leading exclamation mark '!'. The order of filters is relevant, a later exclusion overrides an earlier inclusion and vice versa. resolve : Setting resolve to true will also include all (transitive) dependencies of the files resolveConditional : Whether conditional dependencies of modules should be resolved and added to the module set for this section. By default set to false declareRawModules : Whether raw modules should be declared after jQuery.sap.global became available. With the usage of the ui5loader, this flag should be set to 'false'. By default set to false renderer : Whether renderers for controls should be added to the module set. By default set to false sort : By default, modules are sorted by their dependencies. The sorting can be suppressed by setting the option to false bundleOptions optimize : By default set to false . If set to true , the module bundle gets minified decorateBootstrapModule : By default set to true . If set to false , the module won't be decorated with an optimization marker addTryCatchRestartWrapper : By default set to false . If set to true , bootable module bundles gets wrapped with a try/catch to filter \"Restart\" errors usePredefineCalls : If set to true , sap.ui.predefine is used for UI5 modules numberOfParts : By default set to 1 . The number of parts into which a module bundle should be splitted Specification Versions \u00b6 A project must define a Specification Version by setting the specVersion property. The UI5 Tooling uses this information to detect whether the currently installed version is compatible to a projects configuration. specVersion : \"2.2\" [ ... ] To use new features, a project might need to update the specVersion property. For a given Specification Version MAJOR.MINOR we will increment: MAJOR when there are breaking changes that might require additional actions by the project maintainer MINOR when adding new features that are fully backward compatible All changes are documented below. Compatibility Matrix \u00b6 Unless otherwise noted in the table below, the UI5 Tooling modules are backward compatible. Version UI5 CLI Release 2.2 v2.4.0+ 2.1 v2.2.0+ 2.0 v2.0.0+ 1.1 v1.13.0+ 1.0 v1.0.0+ 0.1 v0.0.1+ Specification Version 2.2 \u00b6 Features: Custom task extensions can make use of the TaskUtil Helper Class Specification Version 2.2 projects are supported by UI5 CLI v2.4.0 and above. Specification Version 2.1 \u00b6 Features: Adds support for the \"customConfiguration\" configuration Custom middleware extensions can make use of the MiddlewareUtil Helper Class Specification Version 2.1 projects are supported by UI5 CLI v2.2.0 and above. Specification Version 2.0 \u00b6 Breaking changes: Adds and enforces schema validation of the ui5.yaml By default the encoding of *.properties files is expected to be UTF-8 (as opposed to ISO-8859-1 in projects defining specification versions below 2.0) A project can still explicitly configure the encoding of its *.properties files Features: Adds support for the \"framework\" configuration to consume SAPUI5 libraries. Specification Version 2.0 projects are supported by UI5 CLI v2.0.0 and above. Specification Version 1.1 \u00b6 Features: Adds support for the theme-library type. Specification Version 1.1 projects are supported by UI5 CLI v1.13.0 and above. Specification Version 1.0 \u00b6 First stable release. Specification Version 1.0 projects are supported by UI5 CLI v1.0.0 and above. Specification Version 0.1 \u00b6 Initial version. Specification Version 0.1 projects are compatible with UI5 CLI v0.0.1 and above.","title":"Configuration"},{"location":"pages/Configuration/#configuration","text":"This document describes the configuration of UI5 Tooling based projects and extensions. It represents Specification Version 2.2 . A projects UI5 Tooling configuration is typically located in a YAML file named ui5.yaml , located in the root directory.","title":"Configuration"},{"location":"pages/Configuration/#validation-ide-support","text":"Starting with specification version 2.0 the configuration is validated according to a JSON schema. The current version of the schema can be found here: https://sap.github.io/ui5-tooling/schema/ui5.yaml.json The schema is also part of the JSON Schema Store catalog which is used by the YAML Language Server . See the list of Clients to find extensions for various IDEs and editors.","title":"Validation / IDE support"},{"location":"pages/Configuration/#example","text":"specVersion : \"2.2\" type : application|library|theme-library|module metadata : name : some.project.name","title":"Example"},{"location":"pages/Configuration/#general-configuration","text":"A project must define a specification version ( specVersion ), to which its configuration is compatible to. Also see Specification Versions . In addition, a project must define a type . This can be either application , library , theme-library (since Specification Version 1.1) or module . The type defines the default path mappings and build tasks. See UI5 Builder: Types for details. specVersion : \"2.2\" type : library","title":"General Configuration"},{"location":"pages/Configuration/#metadata","text":"A project must have a name and might define a copyright string. In the UI5 Tooling, a project is typically identified by the configured name . It must be unique and should ideally follow a namespace scheme like company.businessarea.project . A given copyright string will be used to fill placeholders like ${copyright} and @copyright@ in a projects source code. |- is a way to define a multi line string in YAML. For details, please check the YAML Specification . Inside the copyright string, you can use the placeholder ${currentYear} which will be replaced with the current year. In case your project is deprecated you may also define a property deprecated: true . In projects that have a direct dependency to your project, the UI5 Tooling will then display a deprecation warning. metadata : name : my.cool.project copyright : |- My Cool Project * (c) Copyright 2009-${currentYear} My Company * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.","title":"Metadata"},{"location":"pages/Configuration/#resources","text":"","title":"Resources"},{"location":"pages/Configuration/#path-mapping","text":"Depending on the project type, the UI5 Tooling expects your projects source files to be in certain directories: Type: application Default directory for runtime and test files: webapp Type: library and theme-library Default directory for runtime files: src Default directory for test files: test Type: module By default the projects root directory will be used. If your projects sources are located in different directories, you need to configure a path mapping. As types might require unique project structures, this configuration can differ: Note that all configured paths must be POSIX and relative to the projects root directory.","title":"Path Mapping"},{"location":"pages/Configuration/#path-mapping-of-applications","text":"Available mappings: webapp (runtime path / ) resources : configuration : paths : webapp : my/path","title":"Path Mapping of Applications"},{"location":"pages/Configuration/#path-mapping-of-libraries","text":"Available mappings: src (runtime path /resources ) test (runtime path /test-resources ) resources : configuration : paths : src : path/to/sources test : path/to/tests","title":"Path Mapping of Libraries"},{"location":"pages/Configuration/#path-mapping-of-modules","text":"Any virtual paths can be mapped to any physical path. However, it is recommended that modules include their namespace in the virtual path and use the /resources prefix (e.g. /resources/my/library/module-xy/ ). resources : configuration : paths : /resources/my/library/module-xy/ : lib /resources/my/library/module-xy-min/ : dist","title":"Path Mapping of Modules"},{"location":"pages/Configuration/#encoding-of-properties-files","text":"Info This configuration is available since UI5 CLI v1.7.0 By default the UI5 Tooling expects different encodings for *.properties i18n files, depending on the project's specification version: Specification Version Default propertiesFileSourceEncoding 2.0+ UTF-8 0.1, 1.0 or 1.1 ISO-8859-1 If your project uses a different encoding for *.properties files, you need to set the propertiesFileSourceEncoding configuration property. The UI5 Tooling will read the corresponding files of the project in the given encoding. Any non-ASCII characters will be replaced with the respective Unicode escape sequences. This allows you to deploy the resulting files to any environment, independent of how it expects *.properties files to be encoded. Please refer to RFC 7 for details. resources : configuration : propertiesFileSourceEncoding : UTF-8|ISO-8859-1","title":"Encoding of *.properties files"},{"location":"pages/Configuration/#custom-configuration","text":"Info This configuration is available since UI5 CLI v2.2.0 and applies only to projects defining Specification Version 2.1 or higher. Custom configuration that is ignored by the UI5 Tooling. This can be used to store UI5 specific configuration for third-party tools. The \"customConfiguration\" value must be an object. For third-party tools it is recommended to follow a namespace-like structure. customConfiguration : myTool : key : value myOtherTool : otherKey : otherValue","title":"Custom Configuration"},{"location":"pages/Configuration/#framework-configuration","text":"Info This configuration is available since UI5 CLI v2.0.0 and applies only to projects defining Specification Version 2.0 or higher. Define your project's framework dependencies. In your project's framework configuration you must define whether you want to use the OpenUI5 or the SAPUI5 framework. For more information, see our documentation on the differences between OpenUI5 and SAPUI5 . SAPUI5 framework : name : SAPUI5 OpenUI5 framework : name : OpenUI5 If you are not sure which framework is right for you, see our documentation on the differences between OpenUI5 and SAPUI5 . Warning Projects that use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework. If you want to execute UI5 CLI commands directly in your project you also need to specify the framework version you want to use. Whenever you execute a UI5 CLI command, the framework version of the current root project is used. framework : name : SAPUI5 version : 1.76.0 You can find an overview of the available versions for each framework here: SAPUI5 Version Overview ( Note: The UI5 Tooling can only consume SAPUI5 starting with Version 1.76.0.) OpenUI5 Version Overview","title":"Framework Configuration"},{"location":"pages/Configuration/#dependencies","text":"All libraries required by your project must be listed in the libraries section of the framework configuration. framework : name : SAPUI5 version : 1.76.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp - ...","title":"Dependencies"},{"location":"pages/Configuration/#development-dependencies","text":"Development dependencies are only installed if the project defining them is the current root project. They are typically only required during the development of the project. libraries : - name : sap.ushell development : true Note that a development dependency cannot be optional and vice versa.","title":"Development Dependencies"},{"location":"pages/Configuration/#optional-dependencies","text":"Optional dependencies are installed either if the project defining them is the current root project or if the dependency is already part of the current dependency tree. A typical use case is libraries defining optional dependencies to all theme libraries they support. You can choose which theme library to use by the application that is consuming the library by declaring it as a non-optional dependency. libraries : - name : themelib_sap_fiori_3 optional : true Example my library specVersion : \"2.2\" type : library metadata : name : some.library framework : name : SAPUI5 libraries : - name : sap.ui.core - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true my application (depending on my library) specVersion : \"2.2\" type : application metadata : name : some.app framework : name : SAPUI5 libraries : - name : sap.ui.core - name : themelib_sap_fiori_3 When building the application project, only the theme library themelib_sap_fiori_3 will be installed and built.","title":"Optional Dependencies"},{"location":"pages/Configuration/#build-configuration","text":"","title":"Build Configuration"},{"location":"pages/Configuration/#build-resources","text":"You can exclude a projects resources from the build process using a list of glob patterns. Matching resources will be ignored by the builder and all build tasks. Patterns are applied to the virtual path of resources (i.e. the UI5 runtime paths). Exclude patterns are always applied after any includes. builder : resources : excludes : - \"/resources/some/project/name/test_results/**\" - \"/test-resources/**\" - \"!/test-resources/some/project/name/demo-app/**\"","title":"Build Resources"},{"location":"pages/Configuration/#cachebuster","text":"By default, the generated cachebuster info file signatures are based on timestamps ( time ). In setups like CI environments, a mechanism based on file hashes ( hash ) might be more reliable. See also PR #241 . builder : cachebuster : signatureType : hash","title":"Cachebuster"},{"location":"pages/Configuration/#component-preload-generation","text":"For projects of type application a Component-preload.js bundle is generated by default. You can override this default behavior by defining a componentPreload configuration. For projects of type library there is no Component Preload created by default. However you can define a componentPreload configuration to create Component Preload bundles. Those will be created in addition to the library-preload.js bundle. There are two ways of including components, which can also be used in combination with each other: The paths option takes one or multiple patterns. For every matched file a separate Component-preload.js will be generated. Patterns are always applied relative to the project's virtual source directory /resources/ builder : componentPreload : paths : - \"my/great/app/**/Component.js\" The namespaces option takes one or multiple component namespaces, which correspond to the directory structures: builder : componentPreload : namespaces : - \"my/great/app/componentOne\" - \"my/great/app/componentTwo\"","title":"Component Preload Generation"},{"location":"pages/Configuration/#custom-tasks","text":"You can define custom build tasks that will be executed for the project. Please refer to the Custom Tasks Documentation for a detailed explanation and examples of the build extensibility. Each customTasks entry must define the name of the custom task as defined in its metadata.name property. In addition, the execution order needs to be defined by referencing a standard task or an already configured custom task using the afterTask or beforeTask property. Optionally, arbitrary configuration can be passed to the custom task. builder : customTasks : - name : custom-task-1 beforeTask : replaceCopyright configuration : some-key : some value - name : custom-task-2 afterTask : custom-task-1 configuration : color : blue","title":"Custom Tasks"},{"location":"pages/Configuration/#jsdoc","text":"You can exclude the resources of a project from the JSDoc build process using a list of glob patterns. Matching resources will be ignored by the JSDoc build task. Patterns are always applied relative to the project's virtual source directory /resources/ . These excludes are applied before any general builder excludes that have been defined in builder.resources.excludes . builder : jsdoc : excludes : - \"some/project/name/thirdparty/**\"","title":"JSDoc"},{"location":"pages/Configuration/#server-configuration","text":"By default, the UI5 Tooling will serve applications using port 8080 . When running in HTTP/2 or HTTPS mode, port 8443 will be used. If the default port is already in use, the next higher free port will be used. Instead of this behavior, a project can configure alternative default ports. If the configured port is already in use, an error will be thrown. The server port can still be overwritten with the CLI parameter --port . server : settings : httpPort : 1337 httpsPort : 1443","title":"Server Configuration"},{"location":"pages/Configuration/#extension-configuration","text":"Extensions configuration can be added to any projects ui5.yaml . For better readability, it should to be located after the projects configuration, separated by three dashes \" --- \". In cases where an extension shall be reused across multiple projects you can make it a module itself and have its configuration in a standalone ui5.yaml located inside that module. Extensions can be identified by the kind: extension configuration. Note that if no kind configuration is given, project is assumed.","title":"Extension Configuration"},{"location":"pages/Configuration/#available-extensions","text":"Custom Tasks Custom Server Middleware Project Shims","title":"Available Extensions"},{"location":"pages/Configuration/#example_1","text":"specVersion : \"2.2\" type : application metadata : name : my.application --- specVersion : \"2.2\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : specVersion : \"2.2\" type : module metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\"","title":"Example"},{"location":"pages/Configuration/#custom-bundling","text":"Custom bundles can be defined in the ui5.yaml . Within the builder/bundles configuration a list of bundleDefinitions can be described. builder : bundles : - bundleDefinition : name : \"sap-ui-custom.js\" defaultFileTypes : - \".js\" sections : - mode : raw filters : - ui5loader-autoconfig.js resolve : true sort : true bundleOptions : optimize : true - bundleDefinition : name : \"app.js\" defaultFileTypes : - \".js\" sections : - mode : preload filters : - some/app/Component.js resolve : true sort : true - mode : provided filters : - ui5loader-autoconfig.js resolve : true bundleOptions : optimize : true","title":"Custom Bundling"},{"location":"pages/Configuration/#properties","text":"bundles A list of bundle definitions. A bundleDefinition contains of the following options: name : The module bundle name defaultFileTypes : List of default file types which should be included in the bundle sections : A list of module bundle definition sections. Each section specifies an embedding technology (see API-Reference ) and lists the resources that should be in- or excluded from the section. mode : The embedding technology (e.g. provided, raw, preload) filters : List of resources as glob patterns that should be in- or excluded. A pattern either contains of a trailing slash / or single * and double ** asterisks which denote an arbitrary number of characters or folder names. Exludes should be marked with a leading exclamation mark '!'. The order of filters is relevant, a later exclusion overrides an earlier inclusion and vice versa. resolve : Setting resolve to true will also include all (transitive) dependencies of the files resolveConditional : Whether conditional dependencies of modules should be resolved and added to the module set for this section. By default set to false declareRawModules : Whether raw modules should be declared after jQuery.sap.global became available. With the usage of the ui5loader, this flag should be set to 'false'. By default set to false renderer : Whether renderers for controls should be added to the module set. By default set to false sort : By default, modules are sorted by their dependencies. The sorting can be suppressed by setting the option to false bundleOptions optimize : By default set to false . If set to true , the module bundle gets minified decorateBootstrapModule : By default set to true . If set to false , the module won't be decorated with an optimization marker addTryCatchRestartWrapper : By default set to false . If set to true , bootable module bundles gets wrapped with a try/catch to filter \"Restart\" errors usePredefineCalls : If set to true , sap.ui.predefine is used for UI5 modules numberOfParts : By default set to 1 . The number of parts into which a module bundle should be splitted","title":"Properties"},{"location":"pages/Configuration/#specification-versions","text":"A project must define a Specification Version by setting the specVersion property. The UI5 Tooling uses this information to detect whether the currently installed version is compatible to a projects configuration. specVersion : \"2.2\" [ ... ] To use new features, a project might need to update the specVersion property. For a given Specification Version MAJOR.MINOR we will increment: MAJOR when there are breaking changes that might require additional actions by the project maintainer MINOR when adding new features that are fully backward compatible All changes are documented below.","title":"Specification Versions"},{"location":"pages/Configuration/#compatibility-matrix","text":"Unless otherwise noted in the table below, the UI5 Tooling modules are backward compatible. Version UI5 CLI Release 2.2 v2.4.0+ 2.1 v2.2.0+ 2.0 v2.0.0+ 1.1 v1.13.0+ 1.0 v1.0.0+ 0.1 v0.0.1+","title":"Compatibility Matrix"},{"location":"pages/Configuration/#specification-version-22","text":"Features: Custom task extensions can make use of the TaskUtil Helper Class Specification Version 2.2 projects are supported by UI5 CLI v2.4.0 and above.","title":"Specification Version 2.2"},{"location":"pages/Configuration/#specification-version-21","text":"Features: Adds support for the \"customConfiguration\" configuration Custom middleware extensions can make use of the MiddlewareUtil Helper Class Specification Version 2.1 projects are supported by UI5 CLI v2.2.0 and above.","title":"Specification Version 2.1"},{"location":"pages/Configuration/#specification-version-20","text":"Breaking changes: Adds and enforces schema validation of the ui5.yaml By default the encoding of *.properties files is expected to be UTF-8 (as opposed to ISO-8859-1 in projects defining specification versions below 2.0) A project can still explicitly configure the encoding of its *.properties files Features: Adds support for the \"framework\" configuration to consume SAPUI5 libraries. Specification Version 2.0 projects are supported by UI5 CLI v2.0.0 and above.","title":"Specification Version 2.0"},{"location":"pages/Configuration/#specification-version-11","text":"Features: Adds support for the theme-library type. Specification Version 1.1 projects are supported by UI5 CLI v1.13.0 and above.","title":"Specification Version 1.1"},{"location":"pages/Configuration/#specification-version-10","text":"First stable release. Specification Version 1.0 projects are supported by UI5 CLI v1.0.0 and above.","title":"Specification Version 1.0"},{"location":"pages/Configuration/#specification-version-01","text":"Initial version. Specification Version 0.1 projects are compatible with UI5 CLI v0.0.1 and above.","title":"Specification Version 0.1"},{"location":"pages/FAQ/","text":"FAQ \u00b6 How can I contribute? \u00b6 Please check our Contribution Guidelines . How can I obtain support? \u00b6 Please follow our Contribution Guidelines on how to report an issue. Why package.json? / Why npm? \u00b6 Currently, the tooling can only resolve dependencies defined in a package.json file. This might change in the future by adding Translators for additional dependency management systems. To manage your dependencies, you can use almost any Node.js package manager that relies on package.json files. Popular ones are npm , Yarn and pnpm . The UI5 Tooling resolves dependencies almost the same way Node.js does when executing a require statement. What's the thing with Yarn? \u00b6 In a couple of guides we refer to the Yarn node package manager. This is because it offers functionality that the otherwise preferred npm package manager is currently lacking. Namely, the workspace setting which is currently used in the OpenUI5 (mono-)repository . Note that npm might add this feature in the future. If you do not plan to work with OpenUI5, you may as well use npm or any other node package manger (see FAQ: Why package.json? / Why npm? ). Keep in mind that linking the same module with npm and Yarn may cause issues. Also, Yarn can't work with links created by npm and vice versa. Where are the npm packages? \u00b6 Here (OpenUI5 Libraries) and here (UI5 Tooling).","title":"FAQ"},{"location":"pages/FAQ/#faq","text":"","title":"FAQ"},{"location":"pages/FAQ/#how-can-i-contribute","text":"Please check our Contribution Guidelines .","title":"How can I contribute?"},{"location":"pages/FAQ/#how-can-i-obtain-support","text":"Please follow our Contribution Guidelines on how to report an issue.","title":"How can I obtain support?"},{"location":"pages/FAQ/#why-packagejson-why-npm","text":"Currently, the tooling can only resolve dependencies defined in a package.json file. This might change in the future by adding Translators for additional dependency management systems. To manage your dependencies, you can use almost any Node.js package manager that relies on package.json files. Popular ones are npm , Yarn and pnpm . The UI5 Tooling resolves dependencies almost the same way Node.js does when executing a require statement.","title":"Why package.json? / Why npm?"},{"location":"pages/FAQ/#whats-the-thing-with-yarn","text":"In a couple of guides we refer to the Yarn node package manager. This is because it offers functionality that the otherwise preferred npm package manager is currently lacking. Namely, the workspace setting which is currently used in the OpenUI5 (mono-)repository . Note that npm might add this feature in the future. If you do not plan to work with OpenUI5, you may as well use npm or any other node package manger (see FAQ: Why package.json? / Why npm? ). Keep in mind that linking the same module with npm and Yarn may cause issues. Also, Yarn can't work with links created by npm and vice versa.","title":"What's the thing with Yarn?"},{"location":"pages/FAQ/#where-are-the-npm-packages","text":"Here (OpenUI5 Libraries) and here (UI5 Tooling).","title":"Where are the npm packages?"},{"location":"pages/GettingStarted/","text":"Getting Started \u00b6 Installing the UI5 CLI \u00b6 Requirements \u00b6 Node.js ( version 10 or higher \u26a0\ufe0f) Installation \u00b6 npm install --global @ui5/cli # Verify installation ui5 --help \u26a1\ufe0f Quick Start: OpenUI5 Sample App \u00b6 Check out the OpenUI5 Sample App featuring a full blown How-to to play around with the UI5 Tooling. Enable an Existing Project \u00b6 You can easily check whether or not a project (application or library) can already be used with the UI5 Tooling by looking for a ui5.yaml file in the project's root directory. This file (with some exceptions) is required for all projects and their dependencies (e.g. reuse libraries) to use them in the UI5 Tooling. Setup \u00b6 If your project is not set up for use with the UI5 Tooling yet, follow these steps: If your project does not have a package.json file, let npm generate it: npm init --yes Generate the ui5.yaml file: ui5 init Define the framework you want to use You can choose between the OpenUI5 and the SAPUI5 Framework. Don't know which one to choose? Check out our documentation on the differences between OpenUI5 and SAPUI5 . OpenUI5 ui5 use openui5@latest SAPUI5 ui5 use sapui5@latest Add required libraries ui5 add sap.ui.core sap.m themelib_sap_fiori_3 # [...] If you are using Git or similar version control, commit package.json and ui5.yaml to your repository. Hooray! \ud83c\udf89 You can now use the UI5 Tooling in your project! Execute ui5 serve to start a local development server or use ui5 build --all to create an optimized version of your project, including all of its dependencies which you can deploy from the created ./dist directory.","title":"Getting Started"},{"location":"pages/GettingStarted/#getting-started","text":"","title":"Getting Started"},{"location":"pages/GettingStarted/#installing-the-ui5-cli","text":"","title":"Installing the UI5 CLI"},{"location":"pages/GettingStarted/#requirements","text":"Node.js ( version 10 or higher \u26a0\ufe0f)","title":"Requirements"},{"location":"pages/GettingStarted/#installation","text":"npm install --global @ui5/cli # Verify installation ui5 --help","title":"Installation"},{"location":"pages/GettingStarted/#quick-start-openui5-sample-app","text":"Check out the OpenUI5 Sample App featuring a full blown How-to to play around with the UI5 Tooling.","title":"\u26a1\ufe0f Quick Start: OpenUI5 Sample App"},{"location":"pages/GettingStarted/#enable-an-existing-project","text":"You can easily check whether or not a project (application or library) can already be used with the UI5 Tooling by looking for a ui5.yaml file in the project's root directory. This file (with some exceptions) is required for all projects and their dependencies (e.g. reuse libraries) to use them in the UI5 Tooling.","title":"Enable an Existing Project"},{"location":"pages/GettingStarted/#setup","text":"If your project is not set up for use with the UI5 Tooling yet, follow these steps: If your project does not have a package.json file, let npm generate it: npm init --yes Generate the ui5.yaml file: ui5 init Define the framework you want to use You can choose between the OpenUI5 and the SAPUI5 Framework. Don't know which one to choose? Check out our documentation on the differences between OpenUI5 and SAPUI5 . OpenUI5 ui5 use openui5@latest SAPUI5 ui5 use sapui5@latest Add required libraries ui5 add sap.ui.core sap.m themelib_sap_fiori_3 # [...] If you are using Git or similar version control, commit package.json and ui5.yaml to your repository. Hooray! \ud83c\udf89 You can now use the UI5 Tooling in your project! Execute ui5 serve to start a local development server or use ui5 build --all to create an optimized version of your project, including all of its dependencies which you can deploy from the created ./dist directory.","title":"Setup"},{"location":"pages/Project/","text":"UI5 Project \u00b6 Normalizer \u00b6 The purpose of the normalizer is to collect dependency information and to enrich it with project configuration (both done in generateProjectTree ). Translators are used to collect dependency information. The Project Preprocessor enriches this dependency information with project configuration, typically from a ui5.yaml file. A development server and build process can use this information to locate project and dependency resources. If you want to retrieve the project dependency graph without any configuration, you may use use the generateDependencyTree API. Translators \u00b6 Translators collect recursively all dependencies on a package manager specific layer and return information about them in a well-defined tree structure. Tree structure as returned by a Translator: { \"id\" : \"projectA\" , \"version\" : \"1.0.0\" , \"path\" : \"/absolute/path/to/projectA\" , \"dependencies\" : [ { \"id\" : \"projectB\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectB\" , \"dependencies\" : [ { \"id\" : \"projectD\" , \"path\" : \"/path/to/different/projectD\" } ] }, { \"id\" : \"projectD\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectD\" }, { \"id\" : \"myStaticServerTool\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/some/dependency\" } ] } This dependency tree can be used as input for the Project Preprocessor : npm Translator \u00b6 The npm translator is currently the default translator and looks for dependencies defined in the package.json file of a certain project. dependencies , devDepedencies , and napa dependencies (Git repositories which don't have a package.json file) are located via the Node.js module resolution logic. Static Translator \u00b6 This translator is currently intended for testing purposes only. Can be used to supply the full dependency information of a project in a single structured file. Example: projectDependencies.yaml --- id : testsuite version : \"\" path : \"./\" dependencies : - id : sap.f version : \"\" path : \"../sap.f\" - id : sap.m version : \"\" path : \"../sap.m\" This can be used via ui5 serve --translator static:/path/to/projectDependencies.yaml Project Preprocessor \u00b6 Enhances a given dependency tree based on a projects configuration . Enhanced dependency tree structure as returned by the Project Preprocessor: { \"id\" : \"projectA\" , \"version\" : \"1.0.0\" , \"path\" : \"/absolute/path/to/projectA\" , \"specVersion\" : \"2.2\" , \"type\" : \"application\" , \"metadata\" : { \"name\" : \"sap.projectA\" , \"copyright\" : \"Some copyright ${currentYear}\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"webapp\" : \"app\" } }, \"pathMappings\" : { \"/\" : \"app\" } }, \"dependencies\" : [ { \"id\" : \"projectB\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectB\" , \"specVersion\" : \"2.2\" , \"type\" : \"library\" , \"metadata\" : { \"name\" : \"sap.ui.projectB\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"src\" : \"src\" , \"test\" : \"test\" } }, \"pathMappings\" : { \"/resources/\" : \"src\" , \"/test-resources/\" : \"test\" } }, \"dependencies\" : [ { \"id\" : \"projectD\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/different/projectD\" , \"specVersion\" : \"2.2\" , \"type\" : \"library\" , \"metadata\" : { \"name\" : \"sap.ui.projectD\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"src\" : \"src/main/uilib\" , \"test\" : \"src/test\" } }, \"pathMappings\" : { \"/resources/\" : \"src/main/uilib\" , \"/test-resources/\" : \"src/test\" } }, \"dependencies\" : [] } ] }, { \"id\" : \"projectD\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectD\" , \"specVersion\" : \"2.2\" , \"type\" : \"library\" , \"metadata\" : { \"name\" : \"sap.ui.projectD\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"src\" : \"src/main/uilib\" , \"test\" : \"src/test\" } }, \"pathMappings\" : { \"/resources/\" : \"src/main/uilib\" , \"/test-resources/\" : \"src/test\" } }, \"dependencies\" : [] } ] }","title":"Project"},{"location":"pages/Project/#ui5-project","text":"","title":"UI5 Project"},{"location":"pages/Project/#normalizer","text":"The purpose of the normalizer is to collect dependency information and to enrich it with project configuration (both done in generateProjectTree ). Translators are used to collect dependency information. The Project Preprocessor enriches this dependency information with project configuration, typically from a ui5.yaml file. A development server and build process can use this information to locate project and dependency resources. If you want to retrieve the project dependency graph without any configuration, you may use use the generateDependencyTree API.","title":"Normalizer"},{"location":"pages/Project/#translators","text":"Translators collect recursively all dependencies on a package manager specific layer and return information about them in a well-defined tree structure. Tree structure as returned by a Translator: { \"id\" : \"projectA\" , \"version\" : \"1.0.0\" , \"path\" : \"/absolute/path/to/projectA\" , \"dependencies\" : [ { \"id\" : \"projectB\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectB\" , \"dependencies\" : [ { \"id\" : \"projectD\" , \"path\" : \"/path/to/different/projectD\" } ] }, { \"id\" : \"projectD\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectD\" }, { \"id\" : \"myStaticServerTool\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/some/dependency\" } ] } This dependency tree can be used as input for the Project Preprocessor :","title":"Translators"},{"location":"pages/Project/#npm-translator","text":"The npm translator is currently the default translator and looks for dependencies defined in the package.json file of a certain project. dependencies , devDepedencies , and napa dependencies (Git repositories which don't have a package.json file) are located via the Node.js module resolution logic.","title":"npm Translator"},{"location":"pages/Project/#static-translator","text":"This translator is currently intended for testing purposes only. Can be used to supply the full dependency information of a project in a single structured file. Example: projectDependencies.yaml --- id : testsuite version : \"\" path : \"./\" dependencies : - id : sap.f version : \"\" path : \"../sap.f\" - id : sap.m version : \"\" path : \"../sap.m\" This can be used via ui5 serve --translator static:/path/to/projectDependencies.yaml","title":"Static Translator"},{"location":"pages/Project/#project-preprocessor","text":"Enhances a given dependency tree based on a projects configuration . Enhanced dependency tree structure as returned by the Project Preprocessor: { \"id\" : \"projectA\" , \"version\" : \"1.0.0\" , \"path\" : \"/absolute/path/to/projectA\" , \"specVersion\" : \"2.2\" , \"type\" : \"application\" , \"metadata\" : { \"name\" : \"sap.projectA\" , \"copyright\" : \"Some copyright ${currentYear}\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"webapp\" : \"app\" } }, \"pathMappings\" : { \"/\" : \"app\" } }, \"dependencies\" : [ { \"id\" : \"projectB\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectB\" , \"specVersion\" : \"2.2\" , \"type\" : \"library\" , \"metadata\" : { \"name\" : \"sap.ui.projectB\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"src\" : \"src\" , \"test\" : \"test\" } }, \"pathMappings\" : { \"/resources/\" : \"src\" , \"/test-resources/\" : \"test\" } }, \"dependencies\" : [ { \"id\" : \"projectD\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/different/projectD\" , \"specVersion\" : \"2.2\" , \"type\" : \"library\" , \"metadata\" : { \"name\" : \"sap.ui.projectD\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"src\" : \"src/main/uilib\" , \"test\" : \"src/test\" } }, \"pathMappings\" : { \"/resources/\" : \"src/main/uilib\" , \"/test-resources/\" : \"src/test\" } }, \"dependencies\" : [] } ] }, { \"id\" : \"projectD\" , \"version\" : \"1.0.0\" , \"path\" : \"/path/to/projectD\" , \"specVersion\" : \"2.2\" , \"type\" : \"library\" , \"metadata\" : { \"name\" : \"sap.ui.projectD\" }, \"resources\" : { \"configuration\" : { \"paths\" : { \"src\" : \"src/main/uilib\" , \"test\" : \"src/test\" } }, \"pathMappings\" : { \"/resources/\" : \"src/main/uilib\" , \"/test-resources/\" : \"src/test\" } }, \"dependencies\" : [] } ] }","title":"Project Preprocessor"},{"location":"pages/SAPUI5/","text":"Consuming SAPUI5 libraries \u00b6 Warning Make sure you have installed the UI5 CLI in Version 2.0 or later: npm install --global @ui5/cli Overview \u00b6 SAPUI5 libraries are hosted on the public npm registry at registry.npmjs.org . However, you should not install them using node package managers like npm or Yarn. Instead, please let the UI5 Tooling handle them by following this guide. Info For background information also see the Blog Post \"UI5ers Buzz #49: The UI5 Tooling and SAPUI5 \u2013 The Next Step\" Usage \u00b6 Since Version 2.0 the UI5 CLI will automatically download all required framework dependencies of a project if they have been defined in the corresponding ui5.yaml configuration. They will be cached in a .ui5 directory located in your users' home directory. This happens transparently whenever you execute the ui5 serve or ui5 build commands. All non-framework dependencies, such as reuse libraries or UI5 Tooling extensions, still need to be maintained as npm dependencies in the projects package.json . At the same time, framework dependencies listed in the ui5.yaml should not be listed in the package.json as they will be ignored by the UI5 Tooling. Configuration \u00b6 There is a new configuration section dedicated to framework dependency handling. Example: specVersion : \"2.2\" type : application metadata : name : some.project.name framework : name : SAPUI5 version : 1.76.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp - name : sap.ushell development : true - name : themelib_sap_fiori_3 Example: specVersion : \"2.2\" type : library metadata : name : some.library framework : name : SAPUI5 libraries : - name : sap.ui.core - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true Make sure that your project defines Specification Version 2.0 or higher. For details, please see the corresponding framework configuration documentation . Differences Between OpenUI5 and SAPUI5 \u00b6 The open source project OpenUI5 provides most of the fundamental framework features. SAPUI5 enhances on this by providing additional libraries under a different license. OpenUI5 is provided under the Apache 2.0 license. The SAPUI5 packages that are consumed in the UI5 Tooling are provided under the terms of the SAP Developer License Agreement . Note that projects which use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework. Please also see the UI5 SDK documentation \"SAPUI5 vs. OpenUI5\" .","title":"SAPUI5"},{"location":"pages/SAPUI5/#consuming-sapui5-libraries","text":"Warning Make sure you have installed the UI5 CLI in Version 2.0 or later: npm install --global @ui5/cli","title":"Consuming SAPUI5 libraries"},{"location":"pages/SAPUI5/#overview","text":"SAPUI5 libraries are hosted on the public npm registry at registry.npmjs.org . However, you should not install them using node package managers like npm or Yarn. Instead, please let the UI5 Tooling handle them by following this guide. Info For background information also see the Blog Post \"UI5ers Buzz #49: The UI5 Tooling and SAPUI5 \u2013 The Next Step\"","title":"Overview"},{"location":"pages/SAPUI5/#usage","text":"Since Version 2.0 the UI5 CLI will automatically download all required framework dependencies of a project if they have been defined in the corresponding ui5.yaml configuration. They will be cached in a .ui5 directory located in your users' home directory. This happens transparently whenever you execute the ui5 serve or ui5 build commands. All non-framework dependencies, such as reuse libraries or UI5 Tooling extensions, still need to be maintained as npm dependencies in the projects package.json . At the same time, framework dependencies listed in the ui5.yaml should not be listed in the package.json as they will be ignored by the UI5 Tooling.","title":"Usage"},{"location":"pages/SAPUI5/#configuration","text":"There is a new configuration section dedicated to framework dependency handling. Example: specVersion : \"2.2\" type : application metadata : name : some.project.name framework : name : SAPUI5 version : 1.76.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp - name : sap.ushell development : true - name : themelib_sap_fiori_3 Example: specVersion : \"2.2\" type : library metadata : name : some.library framework : name : SAPUI5 libraries : - name : sap.ui.core - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true Make sure that your project defines Specification Version 2.0 or higher. For details, please see the corresponding framework configuration documentation .","title":"Configuration"},{"location":"pages/SAPUI5/#differences-between-openui5-and-sapui5","text":"The open source project OpenUI5 provides most of the fundamental framework features. SAPUI5 enhances on this by providing additional libraries under a different license. OpenUI5 is provided under the Apache 2.0 license. The SAPUI5 packages that are consumed in the UI5 Tooling are provided under the terms of the SAP Developer License Agreement . Note that projects which use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework. Please also see the UI5 SDK documentation \"SAPUI5 vs. OpenUI5\" .","title":"Differences Between OpenUI5 and SAPUI5"},{"location":"pages/Server/","text":"UI5 Server \u00b6 The UI5 Server provides server capabilities for the UI5 Tooling . Middleware \u00b6 The development server has already a set of middleware which supports the developer with the following features: Escaping of non-ASCII characters in .properties translation files Changes on files with .less extension triggers a theme build and delivers the compiled CSS files. Version info is created automatically ( /resources/sap-ui-version.json ). List project files with URL (needed exclusively by the OpenUI5 testsuite ): /discovery/app_pages , /discovery/all_libs , /discovery/all_tests Certificates for HTTPS or HTTP/2 \u00b6 When using the UI5 Server with the UI5 CLI, SSL certificates for HTTPS and HTTP/2 configurations can automatically be generated. Hint: If Chrome unintentionally redirects an HTTP-URL to HTTPS, you need to delete the HSTS mapping in chrome://net-internals/#hsts by entering the domain name (e.g. localhost) and pressing \"delete\". CSP Reporting \u00b6 The support of a Content Security Policy ( CSP ) is active by default. The header content-security-policy can be set by adding URL parameter sap-ui-xx-csp-policy to the request with the policy name as value. To set the policy to report-only, append :report-only or :ro to the policy name. E.g. /index.html?sap-ui-xx-csp-policy=sap-target-level-1:report-only SAP target CSP \u00b6 The default CSP policies can be modified using parameter sendSAPTargetCSP ( --sap-csp-policies when using the CLI). With sendSAPTargetCSP set to true the policies sap-target-level-1 and sap-target-level-2 policies are activated and send as report-only. Serve CSP Reports \u00b6 Info This option is available since UI5 CLI v2.3.0 Serving of CSP reports can be activated with parameter serveCSPReports ( --serve-csp-reports when using the CLI). With serveCSPReports set to true , the CSP reports are collected and can be downloaded from the server path /.ui5/csp/csp-reports.json .","title":"Server"},{"location":"pages/Server/#ui5-server","text":"The UI5 Server provides server capabilities for the UI5 Tooling .","title":"UI5 Server"},{"location":"pages/Server/#middleware","text":"The development server has already a set of middleware which supports the developer with the following features: Escaping of non-ASCII characters in .properties translation files Changes on files with .less extension triggers a theme build and delivers the compiled CSS files. Version info is created automatically ( /resources/sap-ui-version.json ). List project files with URL (needed exclusively by the OpenUI5 testsuite ): /discovery/app_pages , /discovery/all_libs , /discovery/all_tests","title":"Middleware"},{"location":"pages/Server/#certificates-for-https-or-http2","text":"When using the UI5 Server with the UI5 CLI, SSL certificates for HTTPS and HTTP/2 configurations can automatically be generated. Hint: If Chrome unintentionally redirects an HTTP-URL to HTTPS, you need to delete the HSTS mapping in chrome://net-internals/#hsts by entering the domain name (e.g. localhost) and pressing \"delete\".","title":"Certificates for HTTPS or HTTP/2"},{"location":"pages/Server/#csp-reporting","text":"The support of a Content Security Policy ( CSP ) is active by default. The header content-security-policy can be set by adding URL parameter sap-ui-xx-csp-policy to the request with the policy name as value. To set the policy to report-only, append :report-only or :ro to the policy name. E.g. /index.html?sap-ui-xx-csp-policy=sap-target-level-1:report-only","title":"CSP Reporting"},{"location":"pages/Server/#sap-target-csp","text":"The default CSP policies can be modified using parameter sendSAPTargetCSP ( --sap-csp-policies when using the CLI). With sendSAPTargetCSP set to true the policies sap-target-level-1 and sap-target-level-2 policies are activated and send as report-only.","title":"SAP target CSP"},{"location":"pages/Server/#serve-csp-reports","text":"Info This option is available since UI5 CLI v2.3.0 Serving of CSP reports can be activated with parameter serveCSPReports ( --serve-csp-reports when using the CLI). With serveCSPReports set to true , the CSP reports are collected and can be downloaded from the server path /.ui5/csp/csp-reports.json .","title":"Serve CSP Reports"},{"location":"pages/TasksAndProcessors/","text":"Tasks and Processors \u00b6 Example: Uglifier \u00b6 Task \u00b6 const uglifyProcessor = require ( \"../processors/uglifier\" ); // Require to processor module . exports = function ({ workspace , options }) { // \"workspace\" is a DuplexCollection that represents the projects source directory (e.g. /webapp) // When calling the standard APIs \"byGlob\" and \"byPath\" it will also return resources that have // just been created by other tasks. // The uglify task intents to only process those resources present in the project source directory // therefore it calls the API \"byGlobSource\". return workspace . byGlobSource ( options . pattern ) // Collect all resources that shall be uglified. The caller provides the necessary GLOB pattern. . then (( allResources ) => { return uglifyProcessor ({ // Call to the processor resources : allResources // Pass all resources }); }) . then (( processedResources ) => { // Receive list of changed and newly created resources return Promise . all ( processedResources . map (( resource ) => { return workspace . write ( resource ); // Write them back into the workspace DuplexCollection }) ); }); }; Processor \u00b6 const uglify = require ( \"uglify-es\" ); const copyrightCommentsPattern = /copyright|\\(c\\)(?:[0-9]+|\\s+[0-9A-za-z])|released under|license|\\u00a9/i ; module . exports = function ({ resources }) { // Receive list of resources to uglify return Promise . all ( resources . map (( resource ) => { return resource . getString (). then (( code ) => { // Get resource content as string const result = uglify . minify ({ // Call to the uglify module [ resource . getPath ()] : code }, { warnings : false , output : { comments : copyrightCommentsPattern } }); if ( result . error ) { throw new Error ( // Just throw errors if something fails `Uglification failed with error: ${ result . error . message } in file ${ result . error . filename } ` + `(line ${ result . error . line } , col ${ result . error . col } , pos ${ result . error . pos } )` ); } resource . setString ( result . code ); // Update content of the resource return resource ; // Resolve with list of resources }); })); };","title":"Tasks and Processors"},{"location":"pages/TasksAndProcessors/#tasks-and-processors","text":"","title":"Tasks and Processors"},{"location":"pages/TasksAndProcessors/#example-uglifier","text":"","title":"Example: Uglifier"},{"location":"pages/TasksAndProcessors/#task","text":"const uglifyProcessor = require ( \"../processors/uglifier\" ); // Require to processor module . exports = function ({ workspace , options }) { // \"workspace\" is a DuplexCollection that represents the projects source directory (e.g. /webapp) // When calling the standard APIs \"byGlob\" and \"byPath\" it will also return resources that have // just been created by other tasks. // The uglify task intents to only process those resources present in the project source directory // therefore it calls the API \"byGlobSource\". return workspace . byGlobSource ( options . pattern ) // Collect all resources that shall be uglified. The caller provides the necessary GLOB pattern. . then (( allResources ) => { return uglifyProcessor ({ // Call to the processor resources : allResources // Pass all resources }); }) . then (( processedResources ) => { // Receive list of changed and newly created resources return Promise . all ( processedResources . map (( resource ) => { return workspace . write ( resource ); // Write them back into the workspace DuplexCollection }) ); }); };","title":"Task"},{"location":"pages/TasksAndProcessors/#processor","text":"const uglify = require ( \"uglify-es\" ); const copyrightCommentsPattern = /copyright|\\(c\\)(?:[0-9]+|\\s+[0-9A-za-z])|released under|license|\\u00a9/i ; module . exports = function ({ resources }) { // Receive list of resources to uglify return Promise . all ( resources . map (( resource ) => { return resource . getString (). then (( code ) => { // Get resource content as string const result = uglify . minify ({ // Call to the uglify module [ resource . getPath ()] : code }, { warnings : false , output : { comments : copyrightCommentsPattern } }); if ( result . error ) { throw new Error ( // Just throw errors if something fails `Uglification failed with error: ${ result . error . message } in file ${ result . error . filename } ` + `(line ${ result . error . line } , col ${ result . error . col } , pos ${ result . error . pos } )` ); } resource . setString ( result . code ); // Update content of the resource return resource ; // Resolve with list of resources }); })); };","title":"Processor"},{"location":"pages/Troubleshooting/","text":"Troubleshooting \u00b6 UI5 Server \u00b6 Chrome redirects HTTP URLs to HTTPS ( ERR_SSL_PROTOCOL_ERROR ) \u00b6 An HTTPS server or proxy that was previously running on a domain (e.g. localhost ), might have set an HSTS header, enforcing Chrome to always use HTTPS for this domain. See https://www.chromium.org/hsts . This makes it impossible to connect to an HTTP-only server running on the same domain. Resolution \u00b6 You need to delete the HSTS mapping in chrome://net-internals/#hsts by entering the domain name (e.g. localhost ) and pressing \"delete\". Issues Not Listed Here \u00b6 Please follow our Contribution Guidelines on how to report an issue.","title":"Troubleshooting"},{"location":"pages/Troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"pages/Troubleshooting/#ui5-server","text":"","title":"UI5 Server"},{"location":"pages/Troubleshooting/#chrome-redirects-http-urls-to-https-err_ssl_protocol_error","text":"An HTTPS server or proxy that was previously running on a domain (e.g. localhost ), might have set an HSTS header, enforcing Chrome to always use HTTPS for this domain. See https://www.chromium.org/hsts . This makes it impossible to connect to an HTTP-only server running on the same domain.","title":"Chrome redirects HTTP URLs to HTTPS (ERR_SSL_PROTOCOL_ERROR)"},{"location":"pages/Troubleshooting/#resolution","text":"You need to delete the HSTS mapping in chrome://net-internals/#hsts by entering the domain name (e.g. localhost ) and pressing \"delete\".","title":"Resolution"},{"location":"pages/Troubleshooting/#issues-not-listed-here","text":"Please follow our Contribution Guidelines on how to report an issue.","title":"Issues Not Listed Here"},{"location":"pages/Workflows/","text":"Workflows \u00b6 When developing a UI5 project locally, you should use the UI5 Server ( ui5 serve ) and not the UI5 Builder ( ui5 build ). Building a project should only ever be required when deploying it. However, you might have good reasons to also use the UI5 Builder during development. In such cases, feel free to let us know! Maybe your use case could be covered by a future enhancement of the UI5 Server. Linking Projects \u00b6 Would you like to work on an application project and one or more of its dependencies at the same time? We got you covered! By leaving dependency management up to the tool of your choice (see FAQ: Why package.json? / Why npm? ) you have a variety of options. Here is an example with npm , an application, and a reuse library: Example: Your Directory Structure my-app/ \\_ node_modules/ \\_ webapp/ \\_ ui5.yaml \\_ package.json my-reuse-library/ \\_ node_modules/ \\_ src/ \\_ test/ \\_ ui5.yaml \\_ package.json In its package.json , my-app should already define a dependency to my-reuse-library . So, after running the npm install command, a copy of the \"my-reuse-library\"-package should be retrieved from the package registry and added to my-app's node_modules/ directory. Now all you need to do is replacing this copy of the my-reuse-library package with a link to the my-reuse-library project located somewhere on your computer. In this example it is right next to my-app , but that doesn't really matter. First, in the directory of the my-reuse-library project, create a global link: npm link Then, in the my-app directory, use that link to replace the registry package: npm link my-reuse-library Note: \"my-reuse-library\" is the name defined in the package.json and not necessarily the directory or ui5.yaml name That's it. You can check whether the linking worked by executing ui5 tree in the my-app directory and looking for the path attributes in its output: \u251c\u2500 id: my-app \u251c\u2500 version: 1.0.0 \u251c\u2500 path: /my-app \u2514\u2500 dependencies \u251c\u2500 0 \u2502 \u251c\u2500 id: my-reuse-library \u2502 \u251c\u2500 version: 1.0.0 \u2502 \u251c\u2500 path: /my-reuse-library \u2502 \u2514\u2500 dependencies [...] OpenUI5 Framework Development \u00b6 See SAP/openui5 Developing UI5 . HTTP/2 Development Webserver \u00b6 The UI5 Tooling contains a web server to serve the project via HTTP/2 protocol. ui5 serve --h2 This requires an SSL certificate. You are guided through the automatic generation process. Integration in Other Tools \u00b6 One of the key features of the UI5 Tooling is its modularization. Single parts of the tooling can easily be integrated in other Node.js -based tools and frameworks like Grunt or Gulp . All JavaScript APIs available for direct consumption are listed here . However, for standard UI5 development, the UI5 CLI should always be the first choice.","title":"Workflows"},{"location":"pages/Workflows/#workflows","text":"When developing a UI5 project locally, you should use the UI5 Server ( ui5 serve ) and not the UI5 Builder ( ui5 build ). Building a project should only ever be required when deploying it. However, you might have good reasons to also use the UI5 Builder during development. In such cases, feel free to let us know! Maybe your use case could be covered by a future enhancement of the UI5 Server.","title":"Workflows"},{"location":"pages/Workflows/#linking-projects","text":"Would you like to work on an application project and one or more of its dependencies at the same time? We got you covered! By leaving dependency management up to the tool of your choice (see FAQ: Why package.json? / Why npm? ) you have a variety of options. Here is an example with npm , an application, and a reuse library: Example: Your Directory Structure my-app/ \\_ node_modules/ \\_ webapp/ \\_ ui5.yaml \\_ package.json my-reuse-library/ \\_ node_modules/ \\_ src/ \\_ test/ \\_ ui5.yaml \\_ package.json In its package.json , my-app should already define a dependency to my-reuse-library . So, after running the npm install command, a copy of the \"my-reuse-library\"-package should be retrieved from the package registry and added to my-app's node_modules/ directory. Now all you need to do is replacing this copy of the my-reuse-library package with a link to the my-reuse-library project located somewhere on your computer. In this example it is right next to my-app , but that doesn't really matter. First, in the directory of the my-reuse-library project, create a global link: npm link Then, in the my-app directory, use that link to replace the registry package: npm link my-reuse-library Note: \"my-reuse-library\" is the name defined in the package.json and not necessarily the directory or ui5.yaml name That's it. You can check whether the linking worked by executing ui5 tree in the my-app directory and looking for the path attributes in its output: \u251c\u2500 id: my-app \u251c\u2500 version: 1.0.0 \u251c\u2500 path: /my-app \u2514\u2500 dependencies \u251c\u2500 0 \u2502 \u251c\u2500 id: my-reuse-library \u2502 \u251c\u2500 version: 1.0.0 \u2502 \u251c\u2500 path: /my-reuse-library \u2502 \u2514\u2500 dependencies [...]","title":"Linking Projects"},{"location":"pages/Workflows/#openui5-framework-development","text":"See SAP/openui5 Developing UI5 .","title":"OpenUI5 Framework Development"},{"location":"pages/Workflows/#http2-development-webserver","text":"The UI5 Tooling contains a web server to serve the project via HTTP/2 protocol. ui5 serve --h2 This requires an SSL certificate. You are guided through the automatic generation process.","title":"HTTP/2 Development Webserver"},{"location":"pages/Workflows/#integration-in-other-tools","text":"One of the key features of the UI5 Tooling is its modularization. Single parts of the tooling can easily be integrated in other Node.js -based tools and frameworks like Grunt or Gulp . All JavaScript APIs available for direct consumption are listed here . However, for standard UI5 development, the UI5 CLI should always be the first choice.","title":"Integration in Other Tools"},{"location":"pages/fsInterface/","text":"The fsInterface module is a custom fs implementation which is used to replace node fs . A custom or modified fs can be necessary due to several reasons, maybe for caching functionality or to fallback to multiple locations automatically. To ensure a module or library can be used with custom fs implementations, it is best practice to be able to inject the desired fs module. For Example: var tm = new TestModule({fs: someFs}) If a custom fs module is used, all required methods should be implemented. Currently we only use the methods readFile and stat in fsInterface .","title":"fsInterface"},{"location":"pages/extensibility/CustomServerMiddleware/","text":"Custom UI5 Server Middleware \u00b6 The UI5 Server Extensibility enables you to enhance the functionality of the UI5 Server. You may want to handle requests differently. For example add various headers to a response or parse data of a POST request in a specific way. For this you can plug custom middleware implementations into the internal express server of the UI5 Server module. Configuration \u00b6 In a projects ui5.yaml file, you can define additional server middleware modules that will be executed when the request is received by the server. This configuration exclusively affects the server started in this project. Custom middleware configurations defined in any dependencies are ignored. A middleware may be executed before or after any other middleware. Example: Basic configuration \u00b6 specVersion : \"2.2\" type : application metadata : name : my.application server : customMiddleware : - name : myCustomMiddleware mountPath : /myapp afterMiddleware : compression configuration : debug : true In the above sample the middleware compression is already included as a standard middleware by the UI5 Server. When serving the application my.application , this will execute the custom middleware myCustomMiddleware after compression . There can be optional configuration parameters which are passed directly to the custom middleware implementation (see below). An optional mountPath for which the middleware function is invoked can be provided. It will be passed to the app.use call (see express API reference ). Execution order \u00b6 The order of the middleware is important. Multiple middleware configurations are applied in the provided order. Custom Middleware Extension \u00b6 A custom middleware extension consists of a ui5.yaml and a custom middleware implementation . It can be a standalone module or part of an existing UI5 project. Example: ui5.yaml \u00b6 specVersion : \"2.2\" kind : extension type : server-middleware metadata : name : markdownHandler middleware : path : lib/middleware/markdownHandler.js Custom middleware extensions can be standalone modules which are handled as dependencies. Alternatively you can implement a custom middleware extension as part of your UI5 project . In that case, the configuration of the extension is part of your project configuration inside the ui5.yaml as shown below. The UI5 Server will detect the custom middleware configuration of the project and use the middleware on startup. Example: Custom Middleware Extension defined in UI5 project \u00b6 # Project configuration for the above example specVersion : \"2.2\" kind : project type : application metadata : name : my.application server : customMiddleware : - name : markdownHandler beforeMiddleware : serveResources --- # Custom middleware extension as part of your project specVersion : \"2.2\" kind : extension type : server-middleware metadata : name : markdownHandler middleware : path : lib/middleware/markdownHandler.js Custom Middleware Implementation \u00b6 A custom middleware implementation needs to return a function with the following signature: /** * Custom UI5 Server middleware example * * @param {object} parameters Parameters * @param {object} parameters.resources Resource collections * @param {module:@ui5/fs.AbstractReader} parameters.resources.all Reader or Collection to read resources of the * root project and its dependencies * @param {module:@ui5/fs.AbstractReader} parameters.resources.rootProject Reader or Collection to read resources of * the project the server is started in * @param {module:@ui5/fs.AbstractReader} parameters.resources.dependencies Reader or Collection to read resources of * the projects dependencies * @param {object} parameters.middlewareUtil Specification version dependent interface to a * [MiddlewareUtil]{@link module:@ui5/server.middleware.MiddlewareUtil} instance * @param {object} parameters.options Options * @param {string} [parameters.options.configuration] Custom server middleware configuration if given in ui5.yaml * @returns {function} Middleware function to use */ module . exports = function ({ resources , middlewareUtil , options }) { return function ( req , res , next ) { // [...] } }; Example: lib/middleware/markdownHandler.js \u00b6 // Custom middleware implementation module . exports = function ({ resources , middlewareUtil , options }) { const MarkdownIt = require ( 'markdown-it' ); const md = new MarkdownIt (); return function ( req , res , next ) { if ( ! req . path . endsWith ( \".html\" )) { // Do not handle non-HTML requests next (); return ; } // Try to read a corresponding markdown file resources . rootProject . byPath ( req . path . replace ( \".html\" , \".md\" )). then ( async ( resource ) => { if ( ! resource ) { // No file found, hand over to next middleware next (); return ; } const markdown = await resource . getBuffer (); // Generate HTML from markdown string const html = md . render ( markdown . toString ()); res . type ( '.html' ); res . end ( html ); }). catch (( err ) => { next ( err ); }); } }; Live demo of the above example: https://github.com/SAP/openui5-sample-app/tree/demo-server-middleware-extensibility Helper Class MiddlewareUtil \u00b6 Custom middleware defining Specification Version 2.0 or higher have access to an interface of a MiddlewareUtil instance. In this case, a middlewareUtil object is provided as a part of the custom middleware's parameters . Depending on the specification version of the custom middleware, a set of helper functions is available to the implementation. The lowest required specification version for every function is listed in the MiddlewareUtil API reference .","title":"Custom Server Middleware"},{"location":"pages/extensibility/CustomServerMiddleware/#custom-ui5-server-middleware","text":"The UI5 Server Extensibility enables you to enhance the functionality of the UI5 Server. You may want to handle requests differently. For example add various headers to a response or parse data of a POST request in a specific way. For this you can plug custom middleware implementations into the internal express server of the UI5 Server module.","title":"Custom UI5 Server Middleware"},{"location":"pages/extensibility/CustomServerMiddleware/#configuration","text":"In a projects ui5.yaml file, you can define additional server middleware modules that will be executed when the request is received by the server. This configuration exclusively affects the server started in this project. Custom middleware configurations defined in any dependencies are ignored. A middleware may be executed before or after any other middleware.","title":"Configuration"},{"location":"pages/extensibility/CustomServerMiddleware/#example-basic-configuration","text":"specVersion : \"2.2\" type : application metadata : name : my.application server : customMiddleware : - name : myCustomMiddleware mountPath : /myapp afterMiddleware : compression configuration : debug : true In the above sample the middleware compression is already included as a standard middleware by the UI5 Server. When serving the application my.application , this will execute the custom middleware myCustomMiddleware after compression . There can be optional configuration parameters which are passed directly to the custom middleware implementation (see below). An optional mountPath for which the middleware function is invoked can be provided. It will be passed to the app.use call (see express API reference ).","title":"Example: Basic configuration"},{"location":"pages/extensibility/CustomServerMiddleware/#execution-order","text":"The order of the middleware is important. Multiple middleware configurations are applied in the provided order.","title":"Execution order"},{"location":"pages/extensibility/CustomServerMiddleware/#custom-middleware-extension","text":"A custom middleware extension consists of a ui5.yaml and a custom middleware implementation . It can be a standalone module or part of an existing UI5 project.","title":"Custom Middleware Extension"},{"location":"pages/extensibility/CustomServerMiddleware/#example-ui5yaml","text":"specVersion : \"2.2\" kind : extension type : server-middleware metadata : name : markdownHandler middleware : path : lib/middleware/markdownHandler.js Custom middleware extensions can be standalone modules which are handled as dependencies. Alternatively you can implement a custom middleware extension as part of your UI5 project . In that case, the configuration of the extension is part of your project configuration inside the ui5.yaml as shown below. The UI5 Server will detect the custom middleware configuration of the project and use the middleware on startup.","title":"Example: ui5.yaml"},{"location":"pages/extensibility/CustomServerMiddleware/#example-custom-middleware-extension-defined-in-ui5-project","text":"# Project configuration for the above example specVersion : \"2.2\" kind : project type : application metadata : name : my.application server : customMiddleware : - name : markdownHandler beforeMiddleware : serveResources --- # Custom middleware extension as part of your project specVersion : \"2.2\" kind : extension type : server-middleware metadata : name : markdownHandler middleware : path : lib/middleware/markdownHandler.js","title":"Example: Custom Middleware Extension defined in UI5 project"},{"location":"pages/extensibility/CustomServerMiddleware/#custom-middleware-implementation","text":"A custom middleware implementation needs to return a function with the following signature: /** * Custom UI5 Server middleware example * * @param {object} parameters Parameters * @param {object} parameters.resources Resource collections * @param {module:@ui5/fs.AbstractReader} parameters.resources.all Reader or Collection to read resources of the * root project and its dependencies * @param {module:@ui5/fs.AbstractReader} parameters.resources.rootProject Reader or Collection to read resources of * the project the server is started in * @param {module:@ui5/fs.AbstractReader} parameters.resources.dependencies Reader or Collection to read resources of * the projects dependencies * @param {object} parameters.middlewareUtil Specification version dependent interface to a * [MiddlewareUtil]{@link module:@ui5/server.middleware.MiddlewareUtil} instance * @param {object} parameters.options Options * @param {string} [parameters.options.configuration] Custom server middleware configuration if given in ui5.yaml * @returns {function} Middleware function to use */ module . exports = function ({ resources , middlewareUtil , options }) { return function ( req , res , next ) { // [...] } };","title":"Custom Middleware Implementation"},{"location":"pages/extensibility/CustomServerMiddleware/#example-libmiddlewaremarkdownhandlerjs","text":"// Custom middleware implementation module . exports = function ({ resources , middlewareUtil , options }) { const MarkdownIt = require ( 'markdown-it' ); const md = new MarkdownIt (); return function ( req , res , next ) { if ( ! req . path . endsWith ( \".html\" )) { // Do not handle non-HTML requests next (); return ; } // Try to read a corresponding markdown file resources . rootProject . byPath ( req . path . replace ( \".html\" , \".md\" )). then ( async ( resource ) => { if ( ! resource ) { // No file found, hand over to next middleware next (); return ; } const markdown = await resource . getBuffer (); // Generate HTML from markdown string const html = md . render ( markdown . toString ()); res . type ( '.html' ); res . end ( html ); }). catch (( err ) => { next ( err ); }); } }; Live demo of the above example: https://github.com/SAP/openui5-sample-app/tree/demo-server-middleware-extensibility","title":"Example: lib/middleware/markdownHandler.js"},{"location":"pages/extensibility/CustomServerMiddleware/#helper-class-middlewareutil","text":"Custom middleware defining Specification Version 2.0 or higher have access to an interface of a MiddlewareUtil instance. In this case, a middlewareUtil object is provided as a part of the custom middleware's parameters . Depending on the specification version of the custom middleware, a set of helper functions is available to the implementation. The lowest required specification version for every function is listed in the MiddlewareUtil API reference .","title":"Helper Class MiddlewareUtil"},{"location":"pages/extensibility/CustomTasks/","text":"Custom UI5 Builder Tasks \u00b6 The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard task list , custom tasks can be created. Configuration \u00b6 You can configure your build process with additional build task. The custom tasks can be defined in the project configuration within the ui5.yaml file. In the below example, when building the library my.library the babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediatly after the standard task uglify . Example: Basic configuration \u00b6 # In this example configuration two custom tasks are defined: 'babel' and 'generateMarkdownFiles'. specVersion : \"2.2\" type : library metadata : name : my.library builder : customTasks : - name : babel beforeTask : generateComponentPreload - name : generateMarkdownFiles afterTask : uglify configuration : color : blue Example: Connect multiple custom tasks \u00b6 You can also connect multiple custom task with each other. Please be aware that the order of your definitions is important. You have to make sure that the task is defined before you reference it as beforeTask or afterTask . # In this example 'myCustomTask2' gets executed after 'myCustomTask1'. specVersion : \"2.2\" type : library metadata : name : my.library builder : customTasks : - name : myCustomTask1 beforeTask : generateComponentPreload - name : myCustomTask2 afterTask : myCustomTask1 Custom Task Extension \u00b6 A custom task extension consists of a ui5.yaml and a task implementation . It can be a standalone module or part of an existing UI5 project. Example: ui5.yaml \u00b6 specVersion : \"2.2\" kind : extension type : task metadata : name : generateMarkdownFiles task : path : lib/tasks/generateMarkdownFiles.js Task extensions can be standalone modules which are handled as dependencies. Alternatively you can implement a task extension as part of your UI5 project . In that case, the configuration of the extension is part of your project configuration inside the ui5.yaml as shown below. The task extension will then be automatically collected and processed during the processing of the project. Example: Custom Task Extension defined in UI5 project \u00b6 # Project configuration for the above example specVersion : \"2.2\" kind : project type : library metadata : name : my.library builder : customTasks : - name : generateMarkdownFiles afterTask : uglify configuration : color : blue --- # Task extension as part of your project specVersion : \"2.2\" kind : extension type : task metadata : name : generateMarkdownFiles task : path : lib/tasks/generateMarkdownFiles.js Task Implementation \u00b6 A custom task implementation needs to return a function with the following signature: /** * Custom task example * * @param {object} parameters Parameters * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files * @param {module:@ui5/fs.AbstractReader} parameters.dependencies Reader or Collection to read dependency files * @param {object} parameters.taskUtil Specification Version dependent interface to a * [TaskUtil]{@link module:@ui5/builder.tasks.TaskUtil} instance * @param {object} parameters.options Options * @param {string} parameters.options.projectName Project name * @param {string} [parameters.options.projectNamespace] Project namespace if available * @param {string} [parameters.options.configuration] Task configuration if given in ui5.yaml * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written */ module . exports = async function ({ workspace , dependencies , taskUtil , options }) { // [...] }; The following code snippets shows an example how a task implementation could look like: Example: lib/tasks/generateMarkdownFiles.js \u00b6 // Task implementation const markdownGenerator = require ( \"./markdownGenerator\" ); module . exports = async function ({ workspace , dependencies , taskUtil , options }) { const textResources = await workspace . byGlob ( \"**/*.txt\" ); const markdownResources = await markdownGenerator ({ resources : textResources }); await Promise . all ( markdownResources . map (( resource ) => { return workspace . write ( resource ); })); }; Warning Depending on your project setup, the UI5 Tooling tends to have lots of open files at the same time during a build. To prevent errors like EMFILE: too many open files , we urge custom task implementations to use the graceful-fs module as a drop-in replacement for the native fs module. Helper Class TaskUtil \u00b6 Custom tasks defining Specification Version 2.2 or higher have access to an interface of a TaskUtil instance. In this case, a taskUtil object is provided as a part of the custom task's parameters . Depending on the specification version of the custom task, a set of helper functions is available to the implementation. The lowest required specification version for every function is listed in the TaskUtil API reference .","title":"Custom Tasks"},{"location":"pages/extensibility/CustomTasks/#custom-ui5-builder-tasks","text":"The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard task list , custom tasks can be created.","title":"Custom UI5 Builder Tasks"},{"location":"pages/extensibility/CustomTasks/#configuration","text":"You can configure your build process with additional build task. The custom tasks can be defined in the project configuration within the ui5.yaml file. In the below example, when building the library my.library the babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediatly after the standard task uglify .","title":"Configuration"},{"location":"pages/extensibility/CustomTasks/#example-basic-configuration","text":"# In this example configuration two custom tasks are defined: 'babel' and 'generateMarkdownFiles'. specVersion : \"2.2\" type : library metadata : name : my.library builder : customTasks : - name : babel beforeTask : generateComponentPreload - name : generateMarkdownFiles afterTask : uglify configuration : color : blue","title":"Example: Basic configuration"},{"location":"pages/extensibility/CustomTasks/#example-connect-multiple-custom-tasks","text":"You can also connect multiple custom task with each other. Please be aware that the order of your definitions is important. You have to make sure that the task is defined before you reference it as beforeTask or afterTask . # In this example 'myCustomTask2' gets executed after 'myCustomTask1'. specVersion : \"2.2\" type : library metadata : name : my.library builder : customTasks : - name : myCustomTask1 beforeTask : generateComponentPreload - name : myCustomTask2 afterTask : myCustomTask1","title":"Example: Connect multiple custom tasks"},{"location":"pages/extensibility/CustomTasks/#custom-task-extension","text":"A custom task extension consists of a ui5.yaml and a task implementation . It can be a standalone module or part of an existing UI5 project.","title":"Custom Task Extension"},{"location":"pages/extensibility/CustomTasks/#example-ui5yaml","text":"specVersion : \"2.2\" kind : extension type : task metadata : name : generateMarkdownFiles task : path : lib/tasks/generateMarkdownFiles.js Task extensions can be standalone modules which are handled as dependencies. Alternatively you can implement a task extension as part of your UI5 project . In that case, the configuration of the extension is part of your project configuration inside the ui5.yaml as shown below. The task extension will then be automatically collected and processed during the processing of the project.","title":"Example: ui5.yaml"},{"location":"pages/extensibility/CustomTasks/#example-custom-task-extension-defined-in-ui5-project","text":"# Project configuration for the above example specVersion : \"2.2\" kind : project type : library metadata : name : my.library builder : customTasks : - name : generateMarkdownFiles afterTask : uglify configuration : color : blue --- # Task extension as part of your project specVersion : \"2.2\" kind : extension type : task metadata : name : generateMarkdownFiles task : path : lib/tasks/generateMarkdownFiles.js","title":"Example: Custom Task Extension defined in UI5 project"},{"location":"pages/extensibility/CustomTasks/#task-implementation","text":"A custom task implementation needs to return a function with the following signature: /** * Custom task example * * @param {object} parameters Parameters * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files * @param {module:@ui5/fs.AbstractReader} parameters.dependencies Reader or Collection to read dependency files * @param {object} parameters.taskUtil Specification Version dependent interface to a * [TaskUtil]{@link module:@ui5/builder.tasks.TaskUtil} instance * @param {object} parameters.options Options * @param {string} parameters.options.projectName Project name * @param {string} [parameters.options.projectNamespace] Project namespace if available * @param {string} [parameters.options.configuration] Task configuration if given in ui5.yaml * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written */ module . exports = async function ({ workspace , dependencies , taskUtil , options }) { // [...] }; The following code snippets shows an example how a task implementation could look like:","title":"Task Implementation"},{"location":"pages/extensibility/CustomTasks/#example-libtasksgeneratemarkdownfilesjs","text":"// Task implementation const markdownGenerator = require ( \"./markdownGenerator\" ); module . exports = async function ({ workspace , dependencies , taskUtil , options }) { const textResources = await workspace . byGlob ( \"**/*.txt\" ); const markdownResources = await markdownGenerator ({ resources : textResources }); await Promise . all ( markdownResources . map (( resource ) => { return workspace . write ( resource ); })); }; Warning Depending on your project setup, the UI5 Tooling tends to have lots of open files at the same time during a build. To prevent errors like EMFILE: too many open files , we urge custom task implementations to use the graceful-fs module as a drop-in replacement for the native fs module.","title":"Example: lib/tasks/generateMarkdownFiles.js"},{"location":"pages/extensibility/CustomTasks/#helper-class-taskutil","text":"Custom tasks defining Specification Version 2.2 or higher have access to an interface of a TaskUtil instance. In this case, a taskUtil object is provided as a part of the custom task's parameters . Depending on the specification version of the custom task, a set of helper functions is available to the implementation. The lowest required specification version for every function is listed in the TaskUtil API reference .","title":"Helper Class TaskUtil"},{"location":"pages/extensibility/ProjectShims/","text":"Project Shims \u00b6 A project shim extension can be used to define or extend a project configuration of a module. The most popular use case is probably to add UI5 project configuration to a third party module that otherwise could not be used with the UI5 Tooling. Also see RFC 0002 Project Shims . Structure \u00b6 specVersion : \"2.2\" kind : extension type : project-shim metadata : name : <name of project shim extension> shims : configurations : <module name (id)> : specVersion : \"2.2\" type : <project type> metadata : name : <project name> <module name (id)> : specVersion : \"2.2\" type : <project type> metadata : name : <project name> dependencies : <module name (id)> : - <module name (id)> - <module name (id)> - <module name (id)> collections : <module name> : modules : <id> : <relative path> <id> : <relative path> <id> : <relative path> \"module name\" refers to the name of the module as identified by the used translator. E.g. when using the npm translator, the name declared in the modules package.json is used here. In most cases, the module name also becomes the internal ID of the project. Properties \u00b6 configurations (optional) \u00b6 Used to add configuration to any module. Map of module names. The values represent the configuration that should be applied to the module. Note: Configuration is applied to the module using Object.assign() . This means that existing configuration properties will be overwritten. dependencies (optional) \u00b6 Used to add dependencies to any module. Map of module names. The value is an array of module names that this module depends on. Note that the other modules need to be part of the dependency tree of the root project (not as direct children, just somewhere). collections (optional) \u00b6 Used when a dependency contains multiple modules. Also referred to as a Monorepo . Map of module names. The values are objects with collection-specific configuration: - modules : Map of project IDs and their relative file system paths inside the collection module. The project ID does not have to match the actual module name (as for instance defined in the modules package.json ). UI5 Project will use it in place of a module name. Example A: \u00b6 An application \"my-application\" defines a npm dependency to lodash in its package.json and configures it by using a project-shim extension added to its ui5.yaml . ui5.yaml specVersion : \"2.2\" type : application metadata : name : my.application --- # Everything below this line could also be put into the ui5.yaml of a standalone extension module specVersion : \"2.2\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : # name as defined in package.json specVersion : \"2.2\" type : module # Use module type metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\" # map root directory of lodash module Example B: \u00b6 An application \"application.a\" depends on a library \"legacy.library.a\" which does not contain a ui5.yaml or package.json yet (nor do its dependencies). Structure of the legacy library directories (two repositories) \u00b6 legacy-libs/ \\_ src/ \\_ library.a/ \\_ src/ \\_ test/ \\_ library.b/ \\_ src/ \\_ test/ legacy-library-x/ \\_ src/ \\_ test/ Dependencies between the legacy libraries \u00b6 legacy.library.a depends on legacy.library.b legacy.library.a depends on legacy.library.x legacy.library.b depends on legacy.library.x application.a \u00b6 Directory structure application-a/ \\_ node_modules/ \\_ legacy-libs/ \\_ legacy-library-x/ \\_ webapp/ \\_ ui5.yaml \\_ package.json package.json (extract) napa can install git repositories that are lacking a package.json with npm. Within ui5-project , the npm translator already detects dependencies defined in the napa section of a package.json and tries to resolve them. { \"scripts\" : { \"install\" : \"napa\" }, \"napa\" : { \"legacy-libs\" : \"<git-repository-url>\" , \"legacy-library-x\" : \"<git-repository-url>\" } } ui5.yaml The shim defined in the application configures the legacy libraries and defines their dependencies. This shim might as well be a standalone module that is added to the applications dependencies. That would be the typical reuse scenario for shims. specVersion : \"2.2\" type : application metadata : name : application.a ---- specVersion : \"2.2\" kind : extension type : project-shim metadata : name : legacy-lib-shims shims : configurations : legacy-library-a : specVersion : \"2.2\" type : library metadata : name : legacy.library.a legacy-library-b : specVersion : \"2.2\" type : library metadata : name : legacy.library.b legacy-library-x : specVersion : \"2.2\" type : library metadata : name : legacy.library.x dependencies : legacy-library-a : - legacy-library-b - legacy-library-x legacy-library-b : - legacy-library-x collections : legacy-libs : modules : legacy-library-a : src/library.a legacy-library-b : src/library.b","title":"Project Shims"},{"location":"pages/extensibility/ProjectShims/#project-shims","text":"A project shim extension can be used to define or extend a project configuration of a module. The most popular use case is probably to add UI5 project configuration to a third party module that otherwise could not be used with the UI5 Tooling. Also see RFC 0002 Project Shims .","title":"Project Shims"},{"location":"pages/extensibility/ProjectShims/#structure","text":"specVersion : \"2.2\" kind : extension type : project-shim metadata : name : <name of project shim extension> shims : configurations : <module name (id)> : specVersion : \"2.2\" type : <project type> metadata : name : <project name> <module name (id)> : specVersion : \"2.2\" type : <project type> metadata : name : <project name> dependencies : <module name (id)> : - <module name (id)> - <module name (id)> - <module name (id)> collections : <module name> : modules : <id> : <relative path> <id> : <relative path> <id> : <relative path> \"module name\" refers to the name of the module as identified by the used translator. E.g. when using the npm translator, the name declared in the modules package.json is used here. In most cases, the module name also becomes the internal ID of the project.","title":"Structure"},{"location":"pages/extensibility/ProjectShims/#properties","text":"","title":"Properties"},{"location":"pages/extensibility/ProjectShims/#configurations-optional","text":"Used to add configuration to any module. Map of module names. The values represent the configuration that should be applied to the module. Note: Configuration is applied to the module using Object.assign() . This means that existing configuration properties will be overwritten.","title":"configurations (optional)"},{"location":"pages/extensibility/ProjectShims/#dependencies-optional","text":"Used to add dependencies to any module. Map of module names. The value is an array of module names that this module depends on. Note that the other modules need to be part of the dependency tree of the root project (not as direct children, just somewhere).","title":"dependencies (optional)"},{"location":"pages/extensibility/ProjectShims/#collections-optional","text":"Used when a dependency contains multiple modules. Also referred to as a Monorepo . Map of module names. The values are objects with collection-specific configuration: - modules : Map of project IDs and their relative file system paths inside the collection module. The project ID does not have to match the actual module name (as for instance defined in the modules package.json ). UI5 Project will use it in place of a module name.","title":"collections (optional)"},{"location":"pages/extensibility/ProjectShims/#example-a","text":"An application \"my-application\" defines a npm dependency to lodash in its package.json and configures it by using a project-shim extension added to its ui5.yaml . ui5.yaml specVersion : \"2.2\" type : application metadata : name : my.application --- # Everything below this line could also be put into the ui5.yaml of a standalone extension module specVersion : \"2.2\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : # name as defined in package.json specVersion : \"2.2\" type : module # Use module type metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\" # map root directory of lodash module","title":"Example A:"},{"location":"pages/extensibility/ProjectShims/#example-b","text":"An application \"application.a\" depends on a library \"legacy.library.a\" which does not contain a ui5.yaml or package.json yet (nor do its dependencies).","title":"Example B:"},{"location":"pages/extensibility/ProjectShims/#structure-of-the-legacy-library-directories-two-repositories","text":"legacy-libs/ \\_ src/ \\_ library.a/ \\_ src/ \\_ test/ \\_ library.b/ \\_ src/ \\_ test/ legacy-library-x/ \\_ src/ \\_ test/","title":"Structure of the legacy library directories (two repositories)"},{"location":"pages/extensibility/ProjectShims/#dependencies-between-the-legacy-libraries","text":"legacy.library.a depends on legacy.library.b legacy.library.a depends on legacy.library.x legacy.library.b depends on legacy.library.x","title":"Dependencies between the legacy libraries"},{"location":"pages/extensibility/ProjectShims/#applicationa","text":"Directory structure application-a/ \\_ node_modules/ \\_ legacy-libs/ \\_ legacy-library-x/ \\_ webapp/ \\_ ui5.yaml \\_ package.json package.json (extract) napa can install git repositories that are lacking a package.json with npm. Within ui5-project , the npm translator already detects dependencies defined in the napa section of a package.json and tries to resolve them. { \"scripts\" : { \"install\" : \"napa\" }, \"napa\" : { \"legacy-libs\" : \"<git-repository-url>\" , \"legacy-library-x\" : \"<git-repository-url>\" } } ui5.yaml The shim defined in the application configures the legacy libraries and defines their dependencies. This shim might as well be a standalone module that is added to the applications dependencies. That would be the typical reuse scenario for shims. specVersion : \"2.2\" type : application metadata : name : application.a ---- specVersion : \"2.2\" kind : extension type : project-shim metadata : name : legacy-lib-shims shims : configurations : legacy-library-a : specVersion : \"2.2\" type : library metadata : name : legacy.library.a legacy-library-b : specVersion : \"2.2\" type : library metadata : name : legacy.library.b legacy-library-x : specVersion : \"2.2\" type : library metadata : name : legacy.library.x dependencies : legacy-library-a : - legacy-library-b - legacy-library-x legacy-library-b : - legacy-library-x collections : legacy-libs : modules : legacy-library-a : src/library.a legacy-library-b : src/library.b","title":"application.a"},{"location":"updates/migrate-v1/","text":"Migrate to v1 \u00b6 v1.0.0 is the first stable release of the UI5 Tooling. There are only a few notable changes to the 0.x alpha version. Breaking changes \u00b6 ui5-builder: Add transformation of apps index.html in self-contained build ( SAP/ui5-builder#137 ) When running a self-contained build on an application project, the index.html will be transformed by adopting the UI5 bootstrap script tag to load the custom bundle file instead. ui5-project: normalizer: Rename optional parameter \"translator\" ( SAP/ui5-project#96 ) Renamed parameter \"translator\" of functions generateDependencyTree and generateProjectTree to \"translatorName\" ui5-fs: Remove top-level access to adapters ( SAP/ui5-fs#69 ) Adapters \"AbstractAdapter\", \"FileSystem\" and \"Memory\" used to be accessible via the top-level export of index.js Example: require ( \"@ui5/project\" ). FileSystem This is no longer possible. Adapters are now grouped in the top-level object \"adapters\" and can be accessed from there Example: require ( \"@ui5/project\" ). adapters . FileSystem How to upgrade \u00b6 Global installation \u00b6 To upgrade your global installation, just run the installation command again, which will upgrade to the latest version. npm install --global @ui5/cli Note: Your local CLI installation will still be preferred, so you need to make sure to upgrade it as well (see Local vs. Global installation ). Local installation \u00b6 To upgrade the CLI installation within a project you need to run the following command. npm install @ui5/cli@^1 ui5.yaml \u00b6 specVersion: '1.0' \u00b6 We have introduced the specification version 1.0 . New features will only be available for projects with specVersion 1.0 or newer. The specVersion 0.1 will be compatible with the UI5 CLI v1.0.0, but we still recommend to adopt your projects. specVersion : '1.0' metadata : name : <project-name> type : <project-type>","title":"Migrate to v1"},{"location":"updates/migrate-v1/#migrate-to-v1","text":"v1.0.0 is the first stable release of the UI5 Tooling. There are only a few notable changes to the 0.x alpha version.","title":"Migrate to v1"},{"location":"updates/migrate-v1/#breaking-changes","text":"ui5-builder: Add transformation of apps index.html in self-contained build ( SAP/ui5-builder#137 ) When running a self-contained build on an application project, the index.html will be transformed by adopting the UI5 bootstrap script tag to load the custom bundle file instead. ui5-project: normalizer: Rename optional parameter \"translator\" ( SAP/ui5-project#96 ) Renamed parameter \"translator\" of functions generateDependencyTree and generateProjectTree to \"translatorName\" ui5-fs: Remove top-level access to adapters ( SAP/ui5-fs#69 ) Adapters \"AbstractAdapter\", \"FileSystem\" and \"Memory\" used to be accessible via the top-level export of index.js Example: require ( \"@ui5/project\" ). FileSystem This is no longer possible. Adapters are now grouped in the top-level object \"adapters\" and can be accessed from there Example: require ( \"@ui5/project\" ). adapters . FileSystem","title":"Breaking changes"},{"location":"updates/migrate-v1/#how-to-upgrade","text":"","title":"How to upgrade"},{"location":"updates/migrate-v1/#global-installation","text":"To upgrade your global installation, just run the installation command again, which will upgrade to the latest version. npm install --global @ui5/cli Note: Your local CLI installation will still be preferred, so you need to make sure to upgrade it as well (see Local vs. Global installation ).","title":"Global installation"},{"location":"updates/migrate-v1/#local-installation","text":"To upgrade the CLI installation within a project you need to run the following command. npm install @ui5/cli@^1","title":"Local installation"},{"location":"updates/migrate-v1/#ui5yaml","text":"","title":"ui5.yaml"},{"location":"updates/migrate-v1/#specversion-10","text":"We have introduced the specification version 1.0 . New features will only be available for projects with specVersion 1.0 or newer. The specVersion 0.1 will be compatible with the UI5 CLI v1.0.0, but we still recommend to adopt your projects. specVersion : '1.0' metadata : name : <project-name> type : <project-type>","title":"specVersion: '1.0'"},{"location":"updates/migrate-v2/","text":"Migrate to v2 \u00b6 v2.0.0 of the UI5 Tooling was released on April 1, 2020. As a major feature, it introduces the easy consumption of SAPUI5 libraries in UI5 projects. Breaking changes \u00b6 All UI5 Tooling Modules: Require Node.js >= 10 Support for older Node.js releases has been dropped. UI5 Builder: Make namespace mandatory for application and library projects ( SAP/ui5-builder#430 ) The UI5 Tooling must be able to determine an application- or library project's namespace. Otherwise an error is thrown. Ideally the namespace should be defined in the sap.app/id field of the manifest.json In case of libraries, additional fallbacks are in place: The name attribute defined in the .library file The path of the library.js file UI5 Builder: LibraryFormatter: Ignore manifest.json of nested apps ( SAP/ui5-builder#392 ) If a library contains both a manifest.json and a .library file, they must be located in the same directory. Otherwise the manifest.json is ignored. In cases where the manifest.json is located at a higher level or in a different directory at the same level as the .library file, an exception is thrown. UI5 Server: serveResources middleware: Expect *.properties files in UTF-8 by default ( SAP/ui5-server#303 ) For projects of types other than application or library , the UI5 Server now expects *.properties files to be UTF-8 encoded as opposed to ISO-8859-1 before. Note: This change does not affect most projects as *.properties files are typically only located in applications or libraries, for which their project specific configuration is used. UI5 FS: Remove deprecated parameter useNamespaces ( SAP/ui5-fs#223 ) Remove the deprecated parameter useNamespaces from method resourceFactory.createCollectionsForTree . Use the parameter getVirtualBasePathPrefix instead. How to upgrade \u00b6 Global installation \u00b6 To upgrade your global installation, just run the installation command again, which will upgrade to the latest version. npm install --global @ui5/cli Note: Your local CLI installation will still be preferred, so you need to make sure to upgrade it as well (see Local vs. Global installation ). Local installation \u00b6 To upgrade the CLI installation within a project, you need to run the following command: npm install --save-dev @ui5/cli@^2 ui5.yaml \u00b6 specVersion: '2.0' \u00b6 We have introduced the specification version 2.0 . New features will only be available for projects with specVersion 2.0 or newer. Most projects defining specVersion 0.1 or 1.0 can still be used. specVersion : '2.0' metadata : name : <project-name> type : <project-type>","title":"Migrate to v2"},{"location":"updates/migrate-v2/#migrate-to-v2","text":"v2.0.0 of the UI5 Tooling was released on April 1, 2020. As a major feature, it introduces the easy consumption of SAPUI5 libraries in UI5 projects.","title":"Migrate to v2"},{"location":"updates/migrate-v2/#breaking-changes","text":"All UI5 Tooling Modules: Require Node.js >= 10 Support for older Node.js releases has been dropped. UI5 Builder: Make namespace mandatory for application and library projects ( SAP/ui5-builder#430 ) The UI5 Tooling must be able to determine an application- or library project's namespace. Otherwise an error is thrown. Ideally the namespace should be defined in the sap.app/id field of the manifest.json In case of libraries, additional fallbacks are in place: The name attribute defined in the .library file The path of the library.js file UI5 Builder: LibraryFormatter: Ignore manifest.json of nested apps ( SAP/ui5-builder#392 ) If a library contains both a manifest.json and a .library file, they must be located in the same directory. Otherwise the manifest.json is ignored. In cases where the manifest.json is located at a higher level or in a different directory at the same level as the .library file, an exception is thrown. UI5 Server: serveResources middleware: Expect *.properties files in UTF-8 by default ( SAP/ui5-server#303 ) For projects of types other than application or library , the UI5 Server now expects *.properties files to be UTF-8 encoded as opposed to ISO-8859-1 before. Note: This change does not affect most projects as *.properties files are typically only located in applications or libraries, for which their project specific configuration is used. UI5 FS: Remove deprecated parameter useNamespaces ( SAP/ui5-fs#223 ) Remove the deprecated parameter useNamespaces from method resourceFactory.createCollectionsForTree . Use the parameter getVirtualBasePathPrefix instead.","title":"Breaking changes"},{"location":"updates/migrate-v2/#how-to-upgrade","text":"","title":"How to upgrade"},{"location":"updates/migrate-v2/#global-installation","text":"To upgrade your global installation, just run the installation command again, which will upgrade to the latest version. npm install --global @ui5/cli Note: Your local CLI installation will still be preferred, so you need to make sure to upgrade it as well (see Local vs. Global installation ).","title":"Global installation"},{"location":"updates/migrate-v2/#local-installation","text":"To upgrade the CLI installation within a project, you need to run the following command: npm install --save-dev @ui5/cli@^2","title":"Local installation"},{"location":"updates/migrate-v2/#ui5yaml","text":"","title":"ui5.yaml"},{"location":"updates/migrate-v2/#specversion-20","text":"We have introduced the specification version 2.0 . New features will only be available for projects with specVersion 2.0 or newer. Most projects defining specVersion 0.1 or 1.0 can still be used. specVersion : '2.0' metadata : name : <project-name> type : <project-type>","title":"specVersion: '2.0'"}]}